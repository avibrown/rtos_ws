
06_change_own_priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ac  080060ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b4  080060b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a14  20000010  080060cc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a24  080060cc  00021a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a305  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003373  00000000  00000000  0003a345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0003d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  0003ed08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003eb2  00000000  00000000  00040230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183ce  00000000  00000000  000440e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feadc  00000000  00000000  0005c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015af8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e60  00000000  00000000  0015afdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fd0 	.word	0x08005fd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005fd0 	.word	0x08005fd0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
TaskHandle_t blue_handle, red_handle, green_handle, orange_handle;

int delay = 50000;

int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af02      	add	r7, sp, #8
  HAL_Init();
 80004da:	f000 fabc 	bl	8000a56 <HAL_Init>
  SystemClock_Config();
 80004de:	f000 f8d7 	bl	8000690 <SystemClock_Config>
  MX_GPIO_Init();
 80004e2:	f000 f937 	bl	8000754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f90b 	bl	8000700 <MX_USART2_UART_Init>

  xTaskCreate(vBlueLEDControllerTask,
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <main+0x74>)
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	2264      	movs	r2, #100	; 0x64
 80004f6:	4915      	ldr	r1, [pc, #84]	; (800054c <main+0x78>)
 80004f8:	4815      	ldr	r0, [pc, #84]	; (8000550 <main+0x7c>)
 80004fa:	f003 fe9a 	bl	8004232 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &blue_handle);

  xTaskCreate(vRedLEDControllerTask,
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <main+0x80>)
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2302      	movs	r3, #2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2264      	movs	r2, #100	; 0x64
 800050a:	4913      	ldr	r1, [pc, #76]	; (8000558 <main+0x84>)
 800050c:	4813      	ldr	r0, [pc, #76]	; (800055c <main+0x88>)
 800050e:	f003 fe90 	bl	8004232 <xTaskCreate>
			  100,
			  NULL,
			  2,
			  &red_handle);

  xTaskCreate(vGreenLEDControllerTask,
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <main+0x8c>)
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2303      	movs	r3, #3
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2264      	movs	r2, #100	; 0x64
 800051e:	4911      	ldr	r1, [pc, #68]	; (8000564 <main+0x90>)
 8000520:	4811      	ldr	r0, [pc, #68]	; (8000568 <main+0x94>)
 8000522:	f003 fe86 	bl	8004232 <xTaskCreate>
			  100,
			  NULL,
			  3,
			  &green_handle);

  xTaskCreate(vOrangeLEDControllerTask,
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <main+0x98>)
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2304      	movs	r3, #4
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	2264      	movs	r2, #100	; 0x64
 8000532:	490f      	ldr	r1, [pc, #60]	; (8000570 <main+0x9c>)
 8000534:	480f      	ldr	r0, [pc, #60]	; (8000574 <main+0xa0>)
 8000536:	f003 fe7c 	bl	8004232 <xTaskCreate>
			  100,
			  NULL,
			  4,
			  &orange_handle);

  vTaskStartScheduler();
 800053a:	f004 f85d 	bl	80045f8 <vTaskStartScheduler>
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000c0 	.word	0x200000c0
 800054c:	08005ff4 	.word	0x08005ff4
 8000550:	08000579 	.word	0x08000579
 8000554:	200000c4 	.word	0x200000c4
 8000558:	08006008 	.word	0x08006008
 800055c:	080005ad 	.word	0x080005ad
 8000560:	200000c8 	.word	0x200000c8
 8000564:	0800601c 	.word	0x0800601c
 8000568:	080005f9 	.word	0x080005f9
 800056c:	200000cc 	.word	0x200000cc
 8000570:	08006034 	.word	0x08006034
 8000574:	08000645 	.word	0x08000645

08000578 <vBlueLEDControllerTask>:

void vBlueLEDControllerTask(void *pvParameters)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	int i;

	for (;;)
	{
		BlueTaskProfiler++;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <vBlueLEDControllerTask+0x2c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vBlueLEDControllerTask+0x2c>)
 8000588:	6013      	str	r3, [r2, #0]
		// HAL_GPIO_TogglePin(GPIOD, BLUE);

		// Non-delay delay...
		for (i=0; i<delay; i++) {}
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e002      	b.n	8000596 <vBlueLEDControllerTask+0x1e>
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3301      	adds	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <vBlueLEDControllerTask+0x30>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	429a      	cmp	r2, r3
 800059e:	dbf7      	blt.n	8000590 <vBlueLEDControllerTask+0x18>
		BlueTaskProfiler++;
 80005a0:	e7ee      	b.n	8000580 <vBlueLEDControllerTask+0x8>
 80005a2:	bf00      	nop
 80005a4:	200000b0 	.word	0x200000b0
 80005a8:	20000000 	.word	0x20000000

080005ac <vRedLEDControllerTask>:
	}
}

void vRedLEDControllerTask(void *pvParameters)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	int i, priority;
	priority = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		RedTaskProfiler++;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <vRedLEDControllerTask+0x44>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a0c      	ldr	r2, [pc, #48]	; (80005f0 <vRedLEDControllerTask+0x44>)
 80005c0:	6013      	str	r3, [r2, #0]
		// HAL_GPIO_TogglePin(GPIOD, ORANGE);

		// Non-delay delay...
		for (i=0; i<delay; i++) {}
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	e002      	b.n	80005ce <vRedLEDControllerTask+0x22>
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <vRedLEDControllerTask+0x48>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	dbf7      	blt.n	80005c8 <vRedLEDControllerTask+0x1c>

		if (priority > 1) {
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	ddec      	ble.n	80005b8 <vRedLEDControllerTask+0xc>
			priority--;
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]

			// Change own priority
			vTaskPrioritySet(NULL, priority);
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	4619      	mov	r1, r3
 80005e8:	2000      	movs	r0, #0
 80005ea:	f003 ff67 	bl	80044bc <vTaskPrioritySet>
		RedTaskProfiler++;
 80005ee:	e7e3      	b.n	80005b8 <vRedLEDControllerTask+0xc>
 80005f0:	200000b8 	.word	0x200000b8
 80005f4:	20000000 	.word	0x20000000

080005f8 <vGreenLEDControllerTask>:
		}
	}
}

void vGreenLEDControllerTask(void *pvParameters)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	int i, priority;
	priority = 3;
 8000600:	2303      	movs	r3, #3
 8000602:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		GreenTaskProfiler++;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <vGreenLEDControllerTask+0x44>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a0c      	ldr	r2, [pc, #48]	; (800063c <vGreenLEDControllerTask+0x44>)
 800060c:	6013      	str	r3, [r2, #0]
		// HAL_GPIO_TogglePin(GPIOD, ORANGE);

		// Non-delay delay...
		for (i=0; i<delay; i++) {}
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e002      	b.n	800061a <vGreenLEDControllerTask+0x22>
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <vGreenLEDControllerTask+0x48>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf7      	blt.n	8000614 <vGreenLEDControllerTask+0x1c>

		if (priority > 1) {
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	2b01      	cmp	r3, #1
 8000628:	ddec      	ble.n	8000604 <vGreenLEDControllerTask+0xc>
			priority--;
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	3b01      	subs	r3, #1
 800062e:	60bb      	str	r3, [r7, #8]

			// Change own priority
			vTaskPrioritySet(NULL, priority);
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4619      	mov	r1, r3
 8000634:	2000      	movs	r0, #0
 8000636:	f003 ff41 	bl	80044bc <vTaskPrioritySet>
		GreenTaskProfiler++;
 800063a:	e7e3      	b.n	8000604 <vGreenLEDControllerTask+0xc>
 800063c:	200000b4 	.word	0x200000b4
 8000640:	20000000 	.word	0x20000000

08000644 <vOrangeLEDControllerTask>:
		}
	}
}

void vOrangeLEDControllerTask(void *pvParameters)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	int i, priority;
	priority = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		OrangeTaskProfiler++;
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <vOrangeLEDControllerTask+0x44>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <vOrangeLEDControllerTask+0x44>)
 8000658:	6013      	str	r3, [r2, #0]
		// HAL_GPIO_TogglePin(GPIOD, ORANGE);

		// Non-delay delay...
		for (i=0; i<delay; i++) {}
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	e002      	b.n	8000666 <vOrangeLEDControllerTask+0x22>
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3301      	adds	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <vOrangeLEDControllerTask+0x48>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	429a      	cmp	r2, r3
 800066e:	dbf7      	blt.n	8000660 <vOrangeLEDControllerTask+0x1c>

		if (priority > 1) {
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	2b01      	cmp	r3, #1
 8000674:	ddec      	ble.n	8000650 <vOrangeLEDControllerTask+0xc>
			priority--;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	3b01      	subs	r3, #1
 800067a:	60bb      	str	r3, [r7, #8]

			// Change own priority
			vTaskPrioritySet(NULL, priority);
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4619      	mov	r1, r3
 8000680:	2000      	movs	r0, #0
 8000682:	f003 ff1b 	bl	80044bc <vTaskPrioritySet>
		OrangeTaskProfiler++;
 8000686:	e7e3      	b.n	8000650 <vOrangeLEDControllerTask+0xc>
 8000688:	200000bc 	.word	0x200000bc
 800068c:	20000000 	.word	0x20000000

08000690 <SystemClock_Config>:
	return ch;

}

void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	; 0x58
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2244      	movs	r2, #68	; 0x44
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fc8e 	bl	8005fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b6:	f000 fca5 	bl	8001004 <HAL_PWREx_ControlVoltageScaling>
  {
    // Error_Handler();
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ba:	2310      	movs	r3, #16
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006be:	2301      	movs	r3, #1
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c6:	2360      	movs	r3, #96	; 0x60
 80006c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fcec 	bl	80010b0 <HAL_RCC_OscConfig>
  {
    // Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f8b9 	bl	8001868 <HAL_RCC_ClockConfig>
  {
    // Error_Handler();
  }
}
 80006f6:	bf00      	nop
 80006f8:	3758      	adds	r7, #88	; 0x58
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000744:	f002 fa7e 	bl	8002c44 <HAL_UART_Init>
  {
    // Error_Handler();
  }
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000002c 	.word	0x2000002c
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_GPIO_Init+0x68>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_GPIO_Init+0x68>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_GPIO_Init+0x68>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]

  /* Enable clock access to GPIO port */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_GPIO_Init+0x68>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <MX_GPIO_Init+0x68>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_GPIO_Init+0x68>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* Reset pins */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <MX_GPIO_Init+0x6c>)
 8000792:	f000 fc11 	bl	8000fb8 <HAL_GPIO_WritePin>

  /* Configure pins */
  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000796:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]

  /* Initialize pins*/
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_GPIO_Init+0x6c>)
 80007b0:	f000 fa58 	bl	8000c64 <HAL_GPIO_Init>
}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000
 80007c0:	48000c00 	.word	0x48000c00

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_MspInit+0x4c>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6613      	str	r3, [r2, #96]	; 0x60
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_MspInit+0x4c>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <HAL_MspInit+0x4c>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6593      	str	r3, [r2, #88]	; 0x58
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	210f      	movs	r1, #15
 80007fe:	f06f 0001 	mvn.w	r0, #1
 8000802:	f000 fa05 	bl	8000c10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b0ac      	sub	sp, #176	; 0xb0
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2288      	movs	r2, #136	; 0x88
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f005 fbc3 	bl	8005fc0 <memset>
  if(huart->Instance==USART2)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <HAL_UART_MspInit+0xa8>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d136      	bne.n	80008b2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000844:	2302      	movs	r3, #2
 8000846:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000848:	2300      	movs	r3, #0
 800084a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fa5f 	bl	8001d14 <HAL_RCCEx_PeriphCLKConfig>
    {
     //  Error_Handler();
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_UART_MspInit+0xac>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	4a19      	ldr	r2, [pc, #100]	; (80008c0 <HAL_UART_MspInit+0xac>)
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	6593      	str	r3, [r2, #88]	; 0x58
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_UART_MspInit+0xac>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_UART_MspInit+0xac>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <HAL_UART_MspInit+0xac>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_UART_MspInit+0xac>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000886:	230c      	movs	r3, #12
 8000888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089e:	2307      	movs	r3, #7
 80008a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008a8:	4619      	mov	r1, r3
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f000 f9d9 	bl	8000c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b2:	bf00      	nop
 80008b4:	37b0      	adds	r7, #176	; 0xb0
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40004400 	.word	0x40004400
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008d2:	4b2e      	ldr	r3, [pc, #184]	; (800098c <HAL_InitTick+0xc8>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	4a2d      	ldr	r2, [pc, #180]	; (800098c <HAL_InitTick+0xc8>)
 80008d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008dc:	6613      	str	r3, [r2, #96]	; 0x60
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <HAL_InitTick+0xc8>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ea:	f107 020c 	add.w	r2, r7, #12
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 f97b 	bl	8001bf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008fa:	f001 f963 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 80008fe:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000902:	4a23      	ldr	r2, [pc, #140]	; (8000990 <HAL_InitTick+0xcc>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	0c9b      	lsrs	r3, r3, #18
 800090a:	3b01      	subs	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <HAL_InitTick+0xd0>)
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <HAL_InitTick+0xd4>)
 8000912:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <HAL_InitTick+0xd0>)
 8000916:	f240 32e7 	movw	r2, #999	; 0x3e7
 800091a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <HAL_InitTick+0xd0>)
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <HAL_InitTick+0xd0>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <HAL_InitTick+0xd0>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <HAL_InitTick+0xd0>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000934:	4817      	ldr	r0, [pc, #92]	; (8000994 <HAL_InitTick+0xd0>)
 8000936:	f001 fea9 	bl	800268c <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000944:	2b00      	cmp	r3, #0
 8000946:	d11b      	bne.n	8000980 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <HAL_InitTick+0xd0>)
 800094a:	f001 ff01 	bl	8002750 <HAL_TIM_Base_Start_IT>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000958:	2b00      	cmp	r3, #0
 800095a:	d111      	bne.n	8000980 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800095c:	2019      	movs	r0, #25
 800095e:	f000 f973 	bl	8000c48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d808      	bhi.n	800097a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	2019      	movs	r0, #25
 800096e:	f000 f94f 	bl	8000c10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_InitTick+0xd8>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	e002      	b.n	8000980 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000984:	4618      	mov	r0, r3
 8000986:	3730      	adds	r7, #48	; 0x30
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000
 8000990:	431bde83 	.word	0x431bde83
 8000994:	200000d0 	.word	0x200000d0
 8000998:	40012c00 	.word	0x40012c00
 800099c:	20000008 	.word	0x20000008

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009d2:	f001 ff2d 	bl	8002830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000d0 	.word	0x200000d0

080009e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a08:	f7ff ffea 	bl	80009e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	; (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a32:	f005 fa93 	bl	8005f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a36:	f7ff fd4d 	bl	80004d4 <main>

08000a3a <LoopForever>:

LoopForever:
    b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a48:	080060bc 	.word	0x080060bc
  ldr r2, =_sbss
 8000a4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a50:	20001a24 	.word	0x20001a24

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>

08000a56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f8ca 	bl	8000bfa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a66:	200f      	movs	r0, #15
 8000a68:	f7ff ff2c 	bl	80008c4 <HAL_InitTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	e001      	b.n	8000a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a78:	f7ff fea4 	bl	80007c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	2000011c 	.word	0x2000011c

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db0b      	blt.n	8000b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 021f 	and.w	r2, r3, #31
 8000b1c:	4907      	ldr	r1, [pc, #28]	; (8000b3c <__NVIC_EnableIRQ+0x38>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	095b      	lsrs	r3, r3, #5
 8000b24:	2001      	movs	r0, #1
 8000b26:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	; (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	; (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	; 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ff4c 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c22:	f7ff ff61 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	6978      	ldr	r0, [r7, #20]
 8000c2e:	f7ff ffb1 	bl	8000b94 <NVIC_EncodePriority>
 8000c32:	4602      	mov	r2, r0
 8000c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff80 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c40:	bf00      	nop
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff54 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c72:	e17f      	b.n	8000f74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 8171 	beq.w	8000f6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d005      	beq.n	8000ca4 <HAL_GPIO_Init+0x40>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d130      	bne.n	8000d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cda:	2201      	movs	r2, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	f003 0201 	and.w	r2, r3, #1
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d118      	bne.n	8000d44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	f003 0201 	and.w	r2, r3, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d017      	beq.n	8000d80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d123      	bne.n	8000dd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	08da      	lsrs	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3208      	adds	r2, #8
 8000dce:	6939      	ldr	r1, [r7, #16]
 8000dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0203 	and.w	r2, r3, #3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80ac 	beq.w	8000f6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b5f      	ldr	r3, [pc, #380]	; (8000f94 <HAL_GPIO_Init+0x330>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	4a5e      	ldr	r2, [pc, #376]	; (8000f94 <HAL_GPIO_Init+0x330>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6613      	str	r3, [r2, #96]	; 0x60
 8000e22:	4b5c      	ldr	r3, [pc, #368]	; (8000f94 <HAL_GPIO_Init+0x330>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e2e:	4a5a      	ldr	r2, [pc, #360]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e58:	d025      	beq.n	8000ea6 <HAL_GPIO_Init+0x242>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4f      	ldr	r2, [pc, #316]	; (8000f9c <HAL_GPIO_Init+0x338>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01f      	beq.n	8000ea2 <HAL_GPIO_Init+0x23e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4e      	ldr	r2, [pc, #312]	; (8000fa0 <HAL_GPIO_Init+0x33c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x23a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4d      	ldr	r2, [pc, #308]	; (8000fa4 <HAL_GPIO_Init+0x340>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x236>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	; (8000fa8 <HAL_GPIO_Init+0x344>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x232>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <HAL_GPIO_Init+0x348>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x22e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4a      	ldr	r2, [pc, #296]	; (8000fb0 <HAL_GPIO_Init+0x34c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x22a>
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	e00c      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e8e:	2307      	movs	r3, #7
 8000e90:	e00a      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e92:	2305      	movs	r3, #5
 8000e94:	e008      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e004      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	f002 0203 	and.w	r2, r2, #3
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4093      	lsls	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eb8:	4937      	ldr	r1, [pc, #220]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eea:	4a32      	ldr	r2, [pc, #200]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f14:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f47f ae78 	bne.w	8000c74 <HAL_GPIO_Init+0x10>
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	48000400 	.word	0x48000400
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	48000c00 	.word	0x48000c00
 8000fa8:	48001000 	.word	0x48001000
 8000fac:	48001400 	.word	0x48001400
 8000fb0:	48001800 	.word	0x48001800
 8000fb4:	40010400 	.word	0x40010400

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40007000 	.word	0x40007000

08001004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001012:	d130      	bne.n	8001076 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800101c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001020:	d038      	beq.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800102a:	4a1e      	ldr	r2, [pc, #120]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001030:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2232      	movs	r2, #50	; 0x32
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0c9b      	lsrs	r3, r3, #18
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001048:	e002      	b.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3b01      	subs	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800105c:	d102      	bne.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x60>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f2      	bne.n	800104a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001070:	d110      	bne.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e00f      	b.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800107e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001082:	d007      	beq.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001092:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40007000 	.word	0x40007000
 80010a8:	20000004 	.word	0x20000004
 80010ac:	431bde83 	.word	0x431bde83

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e3ca      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010c2:	4b97      	ldr	r3, [pc, #604]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010cc:	4b94      	ldr	r3, [pc, #592]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80e4 	beq.w	80012ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <HAL_RCC_OscConfig+0x4a>
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b0c      	cmp	r3, #12
 80010ee:	f040 808b 	bne.w	8001208 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	f040 8087 	bne.w	8001208 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010fa:	4b89      	ldr	r3, [pc, #548]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <HAL_RCC_OscConfig+0x62>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e3a2      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a1a      	ldr	r2, [r3, #32]
 8001116:	4b82      	ldr	r3, [pc, #520]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <HAL_RCC_OscConfig+0x7c>
 8001122:	4b7f      	ldr	r3, [pc, #508]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800112a:	e005      	b.n	8001138 <HAL_RCC_OscConfig+0x88>
 800112c:	4b7c      	ldr	r3, [pc, #496]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 800112e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001138:	4293      	cmp	r3, r2
 800113a:	d223      	bcs.n	8001184 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fd87 	bl	8001c54 <RCC_SetFlashLatencyFromMSIRange>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e383      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001150:	4b73      	ldr	r3, [pc, #460]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a72      	ldr	r2, [pc, #456]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b70      	ldr	r3, [pc, #448]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	496d      	ldr	r1, [pc, #436]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116e:	4b6c      	ldr	r3, [pc, #432]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	4968      	ldr	r1, [pc, #416]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 800117e:	4313      	orrs	r3, r2
 8001180:	604b      	str	r3, [r1, #4]
 8001182:	e025      	b.n	80011d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001184:	4b66      	ldr	r3, [pc, #408]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a65      	ldr	r2, [pc, #404]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b63      	ldr	r3, [pc, #396]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4960      	ldr	r1, [pc, #384]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a2:	4b5f      	ldr	r3, [pc, #380]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	495b      	ldr	r1, [pc, #364]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fd47 	bl	8001c54 <RCC_SetFlashLatencyFromMSIRange>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e343      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011d0:	f000 fc4a 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b52      	ldr	r3, [pc, #328]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	4950      	ldr	r1, [pc, #320]	; (8001324 <HAL_RCC_OscConfig+0x274>)
 80011e2:	5ccb      	ldrb	r3, [r1, r3]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_RCC_OscConfig+0x278>)
 80011ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011f0:	4b4e      	ldr	r3, [pc, #312]	; (800132c <HAL_RCC_OscConfig+0x27c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fb65 	bl	80008c4 <HAL_InitTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d052      	beq.n	80012aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	e327      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d032      	beq.n	8001276 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001210:	4b43      	ldr	r3, [pc, #268]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a42      	ldr	r2, [pc, #264]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800121c:	f7ff fc34 	bl	8000a88 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001224:	f7ff fc30 	bl	8000a88 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e310      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001236:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001242:	4b37      	ldr	r3, [pc, #220]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a36      	ldr	r2, [pc, #216]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b34      	ldr	r3, [pc, #208]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4931      	ldr	r1, [pc, #196]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	492c      	ldr	r1, [pc, #176]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
 8001274:	e01a      	b.n	80012ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a29      	ldr	r2, [pc, #164]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001282:	f7ff fc01 	bl	8000a88 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800128a:	f7ff fbfd 	bl	8000a88 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e2dd      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x1da>
 80012a8:	e000      	b.n	80012ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d074      	beq.n	80013a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d005      	beq.n	80012ca <HAL_RCC_OscConfig+0x21a>
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d10e      	bne.n	80012e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d10b      	bne.n	80012e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d064      	beq.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d160      	bne.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e2ba      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x24a>
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e026      	b.n	8001348 <HAL_RCC_OscConfig+0x298>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001302:	d115      	bne.n	8001330 <HAL_RCC_OscConfig+0x280>
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a05      	ldr	r2, [pc, #20]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 800130a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a02      	ldr	r2, [pc, #8]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e014      	b.n	8001348 <HAL_RCC_OscConfig+0x298>
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	08006064 	.word	0x08006064
 8001328:	20000004 	.word	0x20000004
 800132c:	20000008 	.word	0x20000008
 8001330:	4ba0      	ldr	r3, [pc, #640]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a9f      	ldr	r2, [pc, #636]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b9d      	ldr	r3, [pc, #628]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a9c      	ldr	r2, [pc, #624]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fb9a 	bl	8000a88 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fb96 	bl	8000a88 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e276      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800136a:	4b92      	ldr	r3, [pc, #584]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x2a8>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fb86 	bl	8000a88 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fb82 	bl	8000a88 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e262      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001392:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x2d0>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d060      	beq.n	8001470 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_OscConfig+0x310>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d119      	bne.n	80013ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d116      	bne.n	80013ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c0:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x328>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e23f      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	061b      	lsls	r3, r3, #24
 80013e6:	4973      	ldr	r1, [pc, #460]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ec:	e040      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d023      	beq.n	800143e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f6:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a6e      	ldr	r2, [pc, #440]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fb41 	bl	8000a88 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fb3d 	bl	8000a88 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e21d      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141c:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b62      	ldr	r3, [pc, #392]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	061b      	lsls	r3, r3, #24
 8001436:	495f      	ldr	r1, [pc, #380]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
 800143c:	e018      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a5c      	ldr	r2, [pc, #368]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff fb1d 	bl	8000a88 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fb19 	bl	8000a88 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e1f9      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f0      	bne.n	8001452 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d03c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01c      	beq.n	80014be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001484:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148a:	4a4a      	ldr	r2, [pc, #296]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001494:	f7ff faf8 	bl	8000a88 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149c:	f7ff faf4 	bl	8000a88 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1d4      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ef      	beq.n	800149c <HAL_RCC_OscConfig+0x3ec>
 80014bc:	e01b      	b.n	80014f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c4:	4a3b      	ldr	r2, [pc, #236]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff fadb 	bl	8000a88 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fad7 	bl	8000a88 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1b7      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e8:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ef      	bne.n	80014d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80a6 	beq.w	8001650 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10d      	bne.n	8001530 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001518:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 800151a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151e:	6593      	str	r3, [r2, #88]	; 0x58
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152c:	2301      	movs	r3, #1
 800152e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_RCC_OscConfig+0x508>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d118      	bne.n	800156e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_RCC_OscConfig+0x508>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_RCC_OscConfig+0x508>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001548:	f7ff fa9e 	bl	8000a88 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001550:	f7ff fa9a 	bl	8000a88 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e17a      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_RCC_OscConfig+0x508>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_RCC_OscConfig+0x4d8>
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001586:	e029      	b.n	80015dc <HAL_RCC_OscConfig+0x52c>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b05      	cmp	r3, #5
 800158e:	d115      	bne.n	80015bc <HAL_RCC_OscConfig+0x50c>
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a6:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_RCC_OscConfig+0x504>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015b0:	e014      	b.n	80015dc <HAL_RCC_OscConfig+0x52c>
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40007000 	.word	0x40007000
 80015bc:	4b9c      	ldr	r3, [pc, #624]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80015be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c2:	4a9b      	ldr	r2, [pc, #620]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015cc:	4b98      	ldr	r3, [pc, #608]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d2:	4a97      	ldr	r2, [pc, #604]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d016      	beq.n	8001612 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa50 	bl	8000a88 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fa4c 	bl	8000a88 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e12a      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001602:	4b8b      	ldr	r3, [pc, #556]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ed      	beq.n	80015ec <HAL_RCC_OscConfig+0x53c>
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fa39 	bl	8000a88 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fa35 	bl	8000a88 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e113      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001630:	4b7f      	ldr	r3, [pc, #508]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ed      	bne.n	800161a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800163e:	7ffb      	ldrb	r3, [r7, #31]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	4b7a      	ldr	r3, [pc, #488]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	4a79      	ldr	r2, [pc, #484]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80fe 	beq.w	8001856 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	2b02      	cmp	r3, #2
 8001660:	f040 80d0 	bne.w	8001804 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001664:	4b72      	ldr	r3, [pc, #456]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	429a      	cmp	r2, r3
 8001676:	d130      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	3b01      	subs	r3, #1
 8001684:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d127      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001694:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d11f      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016a4:	2a07      	cmp	r2, #7
 80016a6:	bf14      	ite	ne
 80016a8:	2201      	movne	r2, #1
 80016aa:	2200      	moveq	r2, #0
 80016ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d113      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d109      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	3b01      	subs	r3, #1
 80016d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d06e      	beq.n	80017b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b0c      	cmp	r3, #12
 80016de:	d069      	beq.n	80017b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016ec:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0ad      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016fc:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001708:	f7ff f9be 	bl	8000a88 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff f9ba 	bl	8000a88 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e09a      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001722:	4b43      	ldr	r3, [pc, #268]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800172e:	4b40      	ldr	r3, [pc, #256]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	4b40      	ldr	r3, [pc, #256]	; (8001834 <HAL_RCC_OscConfig+0x784>)
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800173e:	3a01      	subs	r2, #1
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001748:	0212      	lsls	r2, r2, #8
 800174a:	4311      	orrs	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001750:	0852      	lsrs	r2, r2, #1
 8001752:	3a01      	subs	r2, #1
 8001754:	0552      	lsls	r2, r2, #21
 8001756:	4311      	orrs	r1, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800175c:	0852      	lsrs	r2, r2, #1
 800175e:	3a01      	subs	r2, #1
 8001760:	0652      	lsls	r2, r2, #25
 8001762:	4311      	orrs	r1, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001768:	0912      	lsrs	r2, r2, #4
 800176a:	0452      	lsls	r2, r2, #17
 800176c:	430a      	orrs	r2, r1
 800176e:	4930      	ldr	r1, [pc, #192]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001770:	4313      	orrs	r3, r2
 8001772:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001774:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 800177a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800177e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001780:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a2a      	ldr	r2, [pc, #168]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800178c:	f7ff f97c 	bl	8000a88 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff f978 	bl	8000a88 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e058      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017b2:	e050      	b.n	8001856 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e04f      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d148      	bne.n	8001856 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80017ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a16      	ldr	r2, [pc, #88]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80017d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017dc:	f7ff f954 	bl	8000a88 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff f950 	bl	8000a88 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e030      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x734>
 8001802:	e028      	b.n	8001856 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d023      	beq.n	8001852 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_RCC_OscConfig+0x780>)
 8001810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff f937 	bl	8000a88 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181c:	e00c      	b.n	8001838 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff f933 	bl	8000a88 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d905      	bls.n	8001838 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e013      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
 8001830:	40021000 	.word	0x40021000
 8001834:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_OscConfig+0x7b0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ec      	bne.n	800181e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_RCC_OscConfig+0x7b0>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4905      	ldr	r1, [pc, #20]	; (8001860 <HAL_RCC_OscConfig+0x7b0>)
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_OscConfig+0x7b4>)
 800184c:	4013      	ands	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
 8001850:	e001      	b.n	8001856 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	feeefffc 	.word	0xfeeefffc

08001868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0e7      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b75      	ldr	r3, [pc, #468]	; (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d910      	bls.n	80018ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b72      	ldr	r3, [pc, #456]	; (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 0207 	bic.w	r2, r3, #7
 8001892:	4970      	ldr	r1, [pc, #448]	; (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b6e      	ldr	r3, [pc, #440]	; (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0cf      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d010      	beq.n	80018da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b66      	ldr	r3, [pc, #408]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d908      	bls.n	80018da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4960      	ldr	r1, [pc, #384]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d04c      	beq.n	8001980 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d121      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0a6      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d115      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e09a      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191e:	4b4e      	ldr	r3, [pc, #312]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e08e      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e086      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800193e:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f023 0203 	bic.w	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4943      	ldr	r1, [pc, #268]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001950:	f7ff f89a 	bl	8000a88 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	e00a      	b.n	800196e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001958:	f7ff f896 	bl	8000a88 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e06e      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 020c 	and.w	r2, r3, #12
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d1eb      	bne.n	8001958 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d010      	beq.n	80019ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001998:	429a      	cmp	r2, r3
 800199a:	d208      	bcs.n	80019ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	492b      	ldr	r1, [pc, #172]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d210      	bcs.n	80019de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 0207 	bic.w	r2, r3, #7
 80019c4:	4923      	ldr	r1, [pc, #140]	; (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e036      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4918      	ldr	r1, [pc, #96]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4910      	ldr	r1, [pc, #64]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a1c:	f000 f824 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	490b      	ldr	r1, [pc, #44]	; (8001a5c <HAL_RCC_ClockConfig+0x1f4>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
 8001a38:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1fc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe ff3f 	bl	80008c4 <HAL_InitTick>
 8001a46:	4603      	mov	r3, r0
 8001a48:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40022000 	.word	0x40022000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	08006064 	.word	0x08006064
 8001a60:	20000004 	.word	0x20000004
 8001a64:	20000008 	.word	0x20000008

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a76:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a80:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x34>
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d121      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d11e      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a9c:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001aa8:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e005      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ac4:	4a2b      	ldr	r2, [pc, #172]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d102      	bne.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	e004      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001aee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d134      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d003      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0xac>
 8001b0c:	e005      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b10:	617b      	str	r3, [r7, #20]
      break;
 8001b12:	e005      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001b16:	617b      	str	r3, [r7, #20]
      break;
 8001b18:	e002      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	617b      	str	r3, [r7, #20]
      break;
 8001b1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	fb03 f202 	mul.w	r2, r3, r2
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	0e5b      	lsrs	r3, r3, #25
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	3301      	adds	r3, #1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b60:	69bb      	ldr	r3, [r7, #24]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	0800607c 	.word	0x0800607c
 8001b78:	00f42400 	.word	0x00f42400
 8001b7c:	007a1200 	.word	0x007a1200

08001b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b9c:	f7ff fff0 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4904      	ldr	r1, [pc, #16]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	08006074 	.word	0x08006074

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bc8:	f7ff ffda 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0adb      	lsrs	r3, r3, #11
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4904      	ldr	r1, [pc, #16]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000
 8001bec:	08006074 	.word	0x08006074

08001bf0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <HAL_RCC_GetClockConfig+0x60>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0207 	and.w	r2, r3, #7
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	601a      	str	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40022000 	.word	0x40022000

08001c54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c6c:	f7ff f9bc 	bl	8000fe8 <HAL_PWREx_GetVoltageRange>
 8001c70:	6178      	str	r0, [r7, #20]
 8001c72:	e014      	b.n	8001c9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c80:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c8c:	f7ff f9ac 	bl	8000fe8 <HAL_PWREx_GetVoltageRange>
 8001c90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca4:	d10b      	bne.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d919      	bls.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2ba0      	cmp	r3, #160	; 0xa0
 8001cb0:	d902      	bls.n	8001cb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	e013      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cb8:	2301      	movs	r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	e010      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b80      	cmp	r3, #128	; 0x80
 8001cc2:	d902      	bls.n	8001cca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e00a      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d102      	bne.n	8001cd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	e004      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b70      	cmp	r3, #112	; 0x70
 8001cda:	d101      	bne.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 0207 	bic.w	r2, r3, #7
 8001ce8:	4909      	ldr	r1, [pc, #36]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40022000 	.word	0x40022000

08001d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d20:	2300      	movs	r3, #0
 8001d22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d041      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d38:	d02a      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d3e:	d824      	bhi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d44:	d008      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d4a:	d81e      	bhi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d54:	d010      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d56:	e018      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d58:	4b86      	ldr	r3, [pc, #536]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a85      	ldr	r2, [pc, #532]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d64:	e015      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fabb 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8001d72:	4603      	mov	r3, r0
 8001d74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d76:	e00c      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3320      	adds	r3, #32
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fba6 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d88:	e003      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8001d8e:	e000      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d92:	7cfb      	ldrb	r3, [r7, #19]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10b      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d98:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001da6:	4973      	ldr	r1, [pc, #460]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dae:	e001      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d041      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001dc8:	d02a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001dca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001dce:	d824      	bhi.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dd4:	d008      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dda:	d81e      	bhi.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de4:	d010      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001de6:	e018      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001de8:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a61      	ldr	r2, [pc, #388]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001df4:	e015      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fa73 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8001e02:	4603      	mov	r3, r0
 8001e04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e06:	e00c      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3320      	adds	r3, #32
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fb5e 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e18:	e003      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e1e:	e000      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e22:	7cfb      	ldrb	r3, [r7, #19]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e28:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e36:	494f      	ldr	r1, [pc, #316]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e3e:	e001      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a0 	beq.w	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00d      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	4a40      	ldr	r2, [pc, #256]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6593      	str	r3, [r2, #88]	; 0x58
 8001e78:	4b3e      	ldr	r3, [pc, #248]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e84:	2301      	movs	r3, #1
 8001e86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e88:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a3a      	ldr	r2, [pc, #232]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e94:	f7fe fdf8 	bl	8000a88 <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e9a:	e009      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9c:	f7fe fdf4 	bl	8000a88 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d902      	bls.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	74fb      	strb	r3, [r7, #19]
        break;
 8001eae:	e005      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ef      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d15c      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ecc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01f      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d019      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef2:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001efc:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fdb3 	bl	8000a88 <HAL_GetTick>
 8001f22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f24:	e00b      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe fdaf 	bl	8000a88 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d902      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f3c:	e006      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ec      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f62:	4904      	ldr	r1, [pc, #16]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f6a:	e009      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	74bb      	strb	r3, [r7, #18]
 8001f70:	e006      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f80:	7c7b      	ldrb	r3, [r7, #17]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b9e      	ldr	r3, [pc, #632]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	4a9d      	ldr	r2, [pc, #628]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9e:	4b98      	ldr	r3, [pc, #608]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa4:	f023 0203 	bic.w	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	4994      	ldr	r1, [pc, #592]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fc0:	4b8f      	ldr	r3, [pc, #572]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc6:	f023 020c 	bic.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	498c      	ldr	r1, [pc, #560]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fe2:	4b87      	ldr	r3, [pc, #540]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4983      	ldr	r1, [pc, #524]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002004:	4b7e      	ldr	r3, [pc, #504]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	497b      	ldr	r1, [pc, #492]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002026:	4b76      	ldr	r3, [pc, #472]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002034:	4972      	ldr	r1, [pc, #456]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002048:	4b6d      	ldr	r3, [pc, #436]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	496a      	ldr	r1, [pc, #424]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800206a:	4b65      	ldr	r3, [pc, #404]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	4961      	ldr	r1, [pc, #388]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800208c:	4b5c      	ldr	r3, [pc, #368]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	4959      	ldr	r1, [pc, #356]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ae:	4b54      	ldr	r3, [pc, #336]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020bc:	4950      	ldr	r1, [pc, #320]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020d0:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	4948      	ldr	r1, [pc, #288]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020f2:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	493f      	ldr	r1, [pc, #252]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d028      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002114:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002122:	4937      	ldr	r1, [pc, #220]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800212e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002132:	d106      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002134:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a31      	ldr	r2, [pc, #196]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800213e:	60d3      	str	r3, [r2, #12]
 8002140:	e011      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800214a:	d10c      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	2101      	movs	r1, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f8c8 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d028      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002172:	4b23      	ldr	r3, [pc, #140]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	491f      	ldr	r1, [pc, #124]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002190:	d106      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4a1a      	ldr	r2, [pc, #104]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800219c:	60d3      	str	r3, [r2, #12]
 800219e:	e011      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2101      	movs	r1, #1
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f899 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 80021b6:	4603      	mov	r3, r0
 80021b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02b      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021de:	4908      	ldr	r1, [pc, #32]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ee:	d109      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a02      	ldr	r2, [pc, #8]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
 80021fc:	e014      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800220c:	d10c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f867 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d02f      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002234:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002242:	4928      	ldr	r1, [pc, #160]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800224e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002252:	d10d      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3304      	adds	r3, #4
 8002258:	2102      	movs	r1, #2
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f844 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d014      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	74bb      	strb	r3, [r7, #18]
 800226e:	e011      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002278:	d10c      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3320      	adds	r3, #32
 800227e:	2102      	movs	r1, #2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f925 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8002286:	4603      	mov	r3, r0
 8002288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ae:	490d      	ldr	r1, [pc, #52]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022d2:	4904      	ldr	r1, [pc, #16]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022da:	7cbb      	ldrb	r3, [r7, #18]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022f6:	4b75      	ldr	r3, [pc, #468]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d018      	beq.n	8002334 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002302:	4b72      	ldr	r3, [pc, #456]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f003 0203 	and.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d10d      	bne.n	800232e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
       ||
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800231a:	4b6c      	ldr	r3, [pc, #432]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
       ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d047      	beq.n	80023be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e044      	b.n	80023be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d018      	beq.n	800236e <RCCEx_PLLSAI1_Config+0x86>
 800233c:	2b03      	cmp	r3, #3
 800233e:	d825      	bhi.n	800238c <RCCEx_PLLSAI1_Config+0xa4>
 8002340:	2b01      	cmp	r3, #1
 8002342:	d002      	beq.n	800234a <RCCEx_PLLSAI1_Config+0x62>
 8002344:	2b02      	cmp	r3, #2
 8002346:	d009      	beq.n	800235c <RCCEx_PLLSAI1_Config+0x74>
 8002348:	e020      	b.n	800238c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800234a:	4b60      	ldr	r3, [pc, #384]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d11d      	bne.n	8002392 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235a:	e01a      	b.n	8002392 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800235c:	4b5b      	ldr	r3, [pc, #364]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d116      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236c:	e013      	b.n	8002396 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800236e:	4b57      	ldr	r3, [pc, #348]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800237a:	4b54      	ldr	r3, [pc, #336]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800238a:	e006      	b.n	800239a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e004      	b.n	800239c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002392:	bf00      	nop
 8002394:	e002      	b.n	800239c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002396:	bf00      	nop
 8002398:	e000      	b.n	800239c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800239a:	bf00      	nop
    }

    if(status == HAL_OK)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023a2:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	430b      	orrs	r3, r1
 80023b8:	4944      	ldr	r1, [pc, #272]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d17d      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023c4:	4b41      	ldr	r3, [pc, #260]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a40      	ldr	r2, [pc, #256]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d0:	f7fe fb5a 	bl	8000a88 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023d6:	e009      	b.n	80023ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023d8:	f7fe fb56 	bl	8000a88 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d902      	bls.n	80023ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	73fb      	strb	r3, [r7, #15]
        break;
 80023ea:	e005      	b.n	80023f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023ec:	4b37      	ldr	r3, [pc, #220]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ef      	bne.n	80023d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d160      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d111      	bne.n	8002428 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002404:	4b31      	ldr	r3, [pc, #196]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800240c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6892      	ldr	r2, [r2, #8]
 8002414:	0211      	lsls	r1, r2, #8
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	0912      	lsrs	r2, r2, #4
 800241c:	0452      	lsls	r2, r2, #17
 800241e:	430a      	orrs	r2, r1
 8002420:	492a      	ldr	r1, [pc, #168]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	610b      	str	r3, [r1, #16]
 8002426:	e027      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d112      	bne.n	8002454 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800242e:	4b27      	ldr	r3, [pc, #156]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002436:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6892      	ldr	r2, [r2, #8]
 800243e:	0211      	lsls	r1, r2, #8
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6912      	ldr	r2, [r2, #16]
 8002444:	0852      	lsrs	r2, r2, #1
 8002446:	3a01      	subs	r2, #1
 8002448:	0552      	lsls	r2, r2, #21
 800244a:	430a      	orrs	r2, r1
 800244c:	491f      	ldr	r1, [pc, #124]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	610b      	str	r3, [r1, #16]
 8002452:	e011      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002454:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800245c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6892      	ldr	r2, [r2, #8]
 8002464:	0211      	lsls	r1, r2, #8
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6952      	ldr	r2, [r2, #20]
 800246a:	0852      	lsrs	r2, r2, #1
 800246c:	3a01      	subs	r2, #1
 800246e:	0652      	lsls	r2, r2, #25
 8002470:	430a      	orrs	r2, r1
 8002472:	4916      	ldr	r1, [pc, #88]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a13      	ldr	r2, [pc, #76]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800247e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002482:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe fb00 	bl	8000a88 <HAL_GetTick>
 8002488:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800248a:	e009      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800248c:	f7fe fafc 	bl	8000a88 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d902      	bls.n	80024a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	73fb      	strb	r3, [r7, #15]
          break;
 800249e:	e005      	b.n	80024ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ef      	beq.n	800248c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	4904      	ldr	r1, [pc, #16]	; (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000

080024d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d018      	beq.n	800251c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024ea:	4b67      	ldr	r3, [pc, #412]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d10d      	bne.n	8002516 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
       ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002502:	4b61      	ldr	r3, [pc, #388]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
       ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d047      	beq.n	80025a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	e044      	b.n	80025a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d018      	beq.n	8002556 <RCCEx_PLLSAI2_Config+0x86>
 8002524:	2b03      	cmp	r3, #3
 8002526:	d825      	bhi.n	8002574 <RCCEx_PLLSAI2_Config+0xa4>
 8002528:	2b01      	cmp	r3, #1
 800252a:	d002      	beq.n	8002532 <RCCEx_PLLSAI2_Config+0x62>
 800252c:	2b02      	cmp	r3, #2
 800252e:	d009      	beq.n	8002544 <RCCEx_PLLSAI2_Config+0x74>
 8002530:	e020      	b.n	8002574 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002532:	4b55      	ldr	r3, [pc, #340]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11d      	bne.n	800257a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002542:	e01a      	b.n	800257a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002544:	4b50      	ldr	r3, [pc, #320]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d116      	bne.n	800257e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002554:	e013      	b.n	800257e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002556:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002562:	4b49      	ldr	r3, [pc, #292]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002572:	e006      	b.n	8002582 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e004      	b.n	8002584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800257a:	bf00      	nop
 800257c:	e002      	b.n	8002584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800257e:	bf00      	nop
 8002580:	e000      	b.n	8002584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002582:	bf00      	nop
    }

    if(status == HAL_OK)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800258a:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	430b      	orrs	r3, r1
 80025a0:	4939      	ldr	r1, [pc, #228]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d167      	bne.n	800267c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025ac:	4b36      	ldr	r3, [pc, #216]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a35      	ldr	r2, [pc, #212]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b8:	f7fe fa66 	bl	8000a88 <HAL_GetTick>
 80025bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025be:	e009      	b.n	80025d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025c0:	f7fe fa62 	bl	8000a88 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d902      	bls.n	80025d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	73fb      	strb	r3, [r7, #15]
        break;
 80025d2:	e005      	b.n	80025e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025d4:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ef      	bne.n	80025c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d14a      	bne.n	800267c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025ec:	4b26      	ldr	r3, [pc, #152]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6892      	ldr	r2, [r2, #8]
 80025fc:	0211      	lsls	r1, r2, #8
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68d2      	ldr	r2, [r2, #12]
 8002602:	0912      	lsrs	r2, r2, #4
 8002604:	0452      	lsls	r2, r2, #17
 8002606:	430a      	orrs	r2, r1
 8002608:	491f      	ldr	r1, [pc, #124]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260a:	4313      	orrs	r3, r2
 800260c:	614b      	str	r3, [r1, #20]
 800260e:	e011      	b.n	8002634 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6892      	ldr	r2, [r2, #8]
 8002620:	0211      	lsls	r1, r2, #8
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6912      	ldr	r2, [r2, #16]
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0652      	lsls	r2, r2, #25
 800262c:	430a      	orrs	r2, r1
 800262e:	4916      	ldr	r1, [pc, #88]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002630:	4313      	orrs	r3, r2
 8002632:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7fe fa22 	bl	8000a88 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002646:	e009      	b.n	800265c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002648:	f7fe fa1e 	bl	8000a88 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	73fb      	strb	r3, [r7, #15]
          break;
 800265a:	e005      	b.n	8002668 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ef      	beq.n	8002648 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4904      	ldr	r1, [pc, #16]	; (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002678:	4313      	orrs	r3, r2
 800267a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000

0800268c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e049      	b.n	8002732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f841 	bl	800273a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f000 fa02 	bl	8002ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d001      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e04f      	b.n	8002808 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a23      	ldr	r2, [pc, #140]	; (8002814 <HAL_TIM_Base_Start_IT+0xc4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01d      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002792:	d018      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_TIM_Base_Start_IT+0xc8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1e      	ldr	r2, [pc, #120]	; (800281c <HAL_TIM_Base_Start_IT+0xcc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00e      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <HAL_TIM_Base_Start_IT+0xd0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <HAL_TIM_Base_Start_IT+0xd4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_TIM_Base_Start_IT+0xd8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d115      	bne.n	80027f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	4b17      	ldr	r3, [pc, #92]	; (800282c <HAL_TIM_Base_Start_IT+0xdc>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b06      	cmp	r3, #6
 80027d6:	d015      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0xb4>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027de:	d011      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f0:	e008      	b.n	8002804 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e000      	b.n	8002806 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40000400 	.word	0x40000400
 800281c:	40000800 	.word	0x40000800
 8002820:	40000c00 	.word	0x40000c00
 8002824:	40013400 	.word	0x40013400
 8002828:	40014000 	.word	0x40014000
 800282c:	00010007 	.word	0x00010007

08002830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b02      	cmp	r3, #2
 8002844:	d122      	bne.n	800288c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b02      	cmp	r3, #2
 8002852:	d11b      	bne.n	800288c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0202 	mvn.w	r2, #2
 800285c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f90f 	bl	8002a96 <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f901 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f912 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b04      	cmp	r3, #4
 8002898:	d122      	bne.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d11b      	bne.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0204 	mvn.w	r2, #4
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f8e5 	bl	8002a96 <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8d7 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f8e8 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0208 	mvn.w	r2, #8
 8002904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2204      	movs	r2, #4
 800290a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8bb 	bl	8002a96 <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f8ad 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f8be 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b10      	cmp	r3, #16
 8002940:	d122      	bne.n	8002988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b10      	cmp	r3, #16
 800294e:	d11b      	bne.n	8002988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0210 	mvn.w	r2, #16
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2208      	movs	r2, #8
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f891 	bl	8002a96 <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f883 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f894 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b01      	cmp	r3, #1
 8002994:	d10e      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d107      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0201 	mvn.w	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f85d 	bl	8002a6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b80      	cmp	r3, #128	; 0x80
 80029c0:	d10e      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	2b80      	cmp	r3, #128	; 0x80
 80029ce:	d107      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f91e 	bl	8002c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ee:	d10e      	bne.n	8002a0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b80      	cmp	r3, #128	; 0x80
 80029fc:	d107      	bne.n	8002a0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f911 	bl	8002c30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a18:	2b40      	cmp	r3, #64	; 0x40
 8002a1a:	d10e      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d107      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f842 	bl	8002abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d10e      	bne.n	8002a66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d107      	bne.n	8002a66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 0220 	mvn.w	r2, #32
 8002a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f8d1 	bl	8002c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a40      	ldr	r2, [pc, #256]	; (8002be8 <TIM_Base_SetConfig+0x114>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d013      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af2:	d00f      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3d      	ldr	r2, [pc, #244]	; (8002bec <TIM_Base_SetConfig+0x118>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00b      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a3c      	ldr	r2, [pc, #240]	; (8002bf0 <TIM_Base_SetConfig+0x11c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d007      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3b      	ldr	r2, [pc, #236]	; (8002bf4 <TIM_Base_SetConfig+0x120>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3a      	ldr	r2, [pc, #232]	; (8002bf8 <TIM_Base_SetConfig+0x124>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d108      	bne.n	8002b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a2f      	ldr	r2, [pc, #188]	; (8002be8 <TIM_Base_SetConfig+0x114>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01f      	beq.n	8002b6e <TIM_Base_SetConfig+0x9a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b34:	d01b      	beq.n	8002b6e <TIM_Base_SetConfig+0x9a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <TIM_Base_SetConfig+0x118>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d017      	beq.n	8002b6e <TIM_Base_SetConfig+0x9a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a2b      	ldr	r2, [pc, #172]	; (8002bf0 <TIM_Base_SetConfig+0x11c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <TIM_Base_SetConfig+0x9a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a2a      	ldr	r2, [pc, #168]	; (8002bf4 <TIM_Base_SetConfig+0x120>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00f      	beq.n	8002b6e <TIM_Base_SetConfig+0x9a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <TIM_Base_SetConfig+0x124>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <TIM_Base_SetConfig+0x9a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <TIM_Base_SetConfig+0x128>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <TIM_Base_SetConfig+0x9a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a27      	ldr	r2, [pc, #156]	; (8002c00 <TIM_Base_SetConfig+0x12c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_Base_SetConfig+0x9a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <TIM_Base_SetConfig+0x130>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <TIM_Base_SetConfig+0x114>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00f      	beq.n	8002bcc <TIM_Base_SetConfig+0xf8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <TIM_Base_SetConfig+0x124>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00b      	beq.n	8002bcc <TIM_Base_SetConfig+0xf8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <TIM_Base_SetConfig+0x128>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <TIM_Base_SetConfig+0xf8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a10      	ldr	r2, [pc, #64]	; (8002c00 <TIM_Base_SetConfig+0x12c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0xf8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <TIM_Base_SetConfig+0x130>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d103      	bne.n	8002bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	615a      	str	r2, [r3, #20]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40000c00 	.word	0x40000c00
 8002bf8:	40013400 	.word	0x40013400
 8002bfc:	40014000 	.word	0x40014000
 8002c00:	40014400 	.word	0x40014400
 8002c04:	40014800 	.word	0x40014800

08002c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e040      	b.n	8002cd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fd fdd4 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f82c 	bl	8002ce0 <UART_SetConfig>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e022      	b.n	8002cd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fad8 	bl	8003250 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fb5f 	bl	8003394 <UART_CheckIdleState>
 8002cd6:	4603      	mov	r3, r0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce4:	b08a      	sub	sp, #40	; 0x28
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4ba4      	ldr	r3, [pc, #656]	; (8002fa0 <UART_SetConfig+0x2c0>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a99      	ldr	r2, [pc, #612]	; (8002fa4 <UART_SetConfig+0x2c4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a90      	ldr	r2, [pc, #576]	; (8002fa8 <UART_SetConfig+0x2c8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d126      	bne.n	8002db8 <UART_SetConfig+0xd8>
 8002d6a:	4b90      	ldr	r3, [pc, #576]	; (8002fac <UART_SetConfig+0x2cc>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d81b      	bhi.n	8002db0 <UART_SetConfig+0xd0>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <UART_SetConfig+0xa0>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002da1 	.word	0x08002da1
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002da9 	.word	0x08002da9
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d96:	e116      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d9e:	e112      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002da0:	2304      	movs	r3, #4
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da6:	e10e      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002da8:	2308      	movs	r3, #8
 8002daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dae:	e10a      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002db0:	2310      	movs	r3, #16
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db6:	e106      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a7c      	ldr	r2, [pc, #496]	; (8002fb0 <UART_SetConfig+0x2d0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d138      	bne.n	8002e34 <UART_SetConfig+0x154>
 8002dc2:	4b7a      	ldr	r3, [pc, #488]	; (8002fac <UART_SetConfig+0x2cc>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	d82d      	bhi.n	8002e2c <UART_SetConfig+0x14c>
 8002dd0:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <UART_SetConfig+0xf8>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002e0d 	.word	0x08002e0d
 8002ddc:	08002e2d 	.word	0x08002e2d
 8002de0:	08002e2d 	.word	0x08002e2d
 8002de4:	08002e2d 	.word	0x08002e2d
 8002de8:	08002e1d 	.word	0x08002e1d
 8002dec:	08002e2d 	.word	0x08002e2d
 8002df0:	08002e2d 	.word	0x08002e2d
 8002df4:	08002e2d 	.word	0x08002e2d
 8002df8:	08002e15 	.word	0x08002e15
 8002dfc:	08002e2d 	.word	0x08002e2d
 8002e00:	08002e2d 	.word	0x08002e2d
 8002e04:	08002e2d 	.word	0x08002e2d
 8002e08:	08002e25 	.word	0x08002e25
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e12:	e0d8      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002e14:	2302      	movs	r3, #2
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1a:	e0d4      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e22:	e0d0      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002e24:	2308      	movs	r3, #8
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2a:	e0cc      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e32:	e0c8      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5e      	ldr	r2, [pc, #376]	; (8002fb4 <UART_SetConfig+0x2d4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d125      	bne.n	8002e8a <UART_SetConfig+0x1aa>
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <UART_SetConfig+0x2cc>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e48:	2b30      	cmp	r3, #48	; 0x30
 8002e4a:	d016      	beq.n	8002e7a <UART_SetConfig+0x19a>
 8002e4c:	2b30      	cmp	r3, #48	; 0x30
 8002e4e:	d818      	bhi.n	8002e82 <UART_SetConfig+0x1a2>
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d00a      	beq.n	8002e6a <UART_SetConfig+0x18a>
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d814      	bhi.n	8002e82 <UART_SetConfig+0x1a2>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <UART_SetConfig+0x182>
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d008      	beq.n	8002e72 <UART_SetConfig+0x192>
 8002e60:	e00f      	b.n	8002e82 <UART_SetConfig+0x1a2>
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e68:	e0ad      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e70:	e0a9      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002e72:	2304      	movs	r3, #4
 8002e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e78:	e0a5      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e80:	e0a1      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002e82:	2310      	movs	r3, #16
 8002e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e88:	e09d      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a4a      	ldr	r2, [pc, #296]	; (8002fb8 <UART_SetConfig+0x2d8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d125      	bne.n	8002ee0 <UART_SetConfig+0x200>
 8002e94:	4b45      	ldr	r3, [pc, #276]	; (8002fac <UART_SetConfig+0x2cc>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002ea0:	d016      	beq.n	8002ed0 <UART_SetConfig+0x1f0>
 8002ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ea4:	d818      	bhi.n	8002ed8 <UART_SetConfig+0x1f8>
 8002ea6:	2b80      	cmp	r3, #128	; 0x80
 8002ea8:	d00a      	beq.n	8002ec0 <UART_SetConfig+0x1e0>
 8002eaa:	2b80      	cmp	r3, #128	; 0x80
 8002eac:	d814      	bhi.n	8002ed8 <UART_SetConfig+0x1f8>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <UART_SetConfig+0x1d8>
 8002eb2:	2b40      	cmp	r3, #64	; 0x40
 8002eb4:	d008      	beq.n	8002ec8 <UART_SetConfig+0x1e8>
 8002eb6:	e00f      	b.n	8002ed8 <UART_SetConfig+0x1f8>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ebe:	e082      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ec6:	e07e      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ece:	e07a      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ed6:	e076      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002ed8:	2310      	movs	r3, #16
 8002eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ede:	e072      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a35      	ldr	r2, [pc, #212]	; (8002fbc <UART_SetConfig+0x2dc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d12a      	bne.n	8002f40 <UART_SetConfig+0x260>
 8002eea:	4b30      	ldr	r3, [pc, #192]	; (8002fac <UART_SetConfig+0x2cc>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef8:	d01a      	beq.n	8002f30 <UART_SetConfig+0x250>
 8002efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002efe:	d81b      	bhi.n	8002f38 <UART_SetConfig+0x258>
 8002f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f04:	d00c      	beq.n	8002f20 <UART_SetConfig+0x240>
 8002f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f0a:	d815      	bhi.n	8002f38 <UART_SetConfig+0x258>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <UART_SetConfig+0x238>
 8002f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f14:	d008      	beq.n	8002f28 <UART_SetConfig+0x248>
 8002f16:	e00f      	b.n	8002f38 <UART_SetConfig+0x258>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f1e:	e052      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002f20:	2302      	movs	r3, #2
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f26:	e04e      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f2e:	e04a      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002f30:	2308      	movs	r3, #8
 8002f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f36:	e046      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002f38:	2310      	movs	r3, #16
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3e:	e042      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <UART_SetConfig+0x2c4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d13a      	bne.n	8002fc0 <UART_SetConfig+0x2e0>
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <UART_SetConfig+0x2cc>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f58:	d01a      	beq.n	8002f90 <UART_SetConfig+0x2b0>
 8002f5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f5e:	d81b      	bhi.n	8002f98 <UART_SetConfig+0x2b8>
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f64:	d00c      	beq.n	8002f80 <UART_SetConfig+0x2a0>
 8002f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6a:	d815      	bhi.n	8002f98 <UART_SetConfig+0x2b8>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <UART_SetConfig+0x298>
 8002f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f74:	d008      	beq.n	8002f88 <UART_SetConfig+0x2a8>
 8002f76:	e00f      	b.n	8002f98 <UART_SetConfig+0x2b8>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7e:	e022      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002f80:	2302      	movs	r3, #2
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f86:	e01e      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8e:	e01a      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002f90:	2308      	movs	r3, #8
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f96:	e016      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9e:	e012      	b.n	8002fc6 <UART_SetConfig+0x2e6>
 8002fa0:	efff69f3 	.word	0xefff69f3
 8002fa4:	40008000 	.word	0x40008000
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40004400 	.word	0x40004400
 8002fb4:	40004800 	.word	0x40004800
 8002fb8:	40004c00 	.word	0x40004c00
 8002fbc:	40005000 	.word	0x40005000
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a9f      	ldr	r2, [pc, #636]	; (8003248 <UART_SetConfig+0x568>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d17a      	bne.n	80030c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d824      	bhi.n	8003022 <UART_SetConfig+0x342>
 8002fd8:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <UART_SetConfig+0x300>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	08003005 	.word	0x08003005
 8002fe4:	08003023 	.word	0x08003023
 8002fe8:	0800300d 	.word	0x0800300d
 8002fec:	08003023 	.word	0x08003023
 8002ff0:	08003013 	.word	0x08003013
 8002ff4:	08003023 	.word	0x08003023
 8002ff8:	08003023 	.word	0x08003023
 8002ffc:	08003023 	.word	0x08003023
 8003000:	0800301b 	.word	0x0800301b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003004:	f7fe fdc8 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8003008:	61f8      	str	r0, [r7, #28]
        break;
 800300a:	e010      	b.n	800302e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800300c:	4b8f      	ldr	r3, [pc, #572]	; (800324c <UART_SetConfig+0x56c>)
 800300e:	61fb      	str	r3, [r7, #28]
        break;
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003012:	f7fe fd29 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8003016:	61f8      	str	r0, [r7, #28]
        break;
 8003018:	e009      	b.n	800302e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800301a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800301e:	61fb      	str	r3, [r7, #28]
        break;
 8003020:	e005      	b.n	800302e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800302c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80fb 	beq.w	800322c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	429a      	cmp	r2, r3
 8003044:	d305      	bcc.n	8003052 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	429a      	cmp	r2, r3
 8003050:	d903      	bls.n	800305a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003058:	e0e8      	b.n	800322c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2200      	movs	r2, #0
 800305e:	461c      	mov	r4, r3
 8003060:	4615      	mov	r5, r2
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	022b      	lsls	r3, r5, #8
 800306c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003070:	0222      	lsls	r2, r4, #8
 8003072:	68f9      	ldr	r1, [r7, #12]
 8003074:	6849      	ldr	r1, [r1, #4]
 8003076:	0849      	lsrs	r1, r1, #1
 8003078:	2000      	movs	r0, #0
 800307a:	4688      	mov	r8, r1
 800307c:	4681      	mov	r9, r0
 800307e:	eb12 0a08 	adds.w	sl, r2, r8
 8003082:	eb43 0b09 	adc.w	fp, r3, r9
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003094:	4650      	mov	r0, sl
 8003096:	4659      	mov	r1, fp
 8003098:	f7fd f89a 	bl	80001d0 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4613      	mov	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030aa:	d308      	bcc.n	80030be <UART_SetConfig+0x3de>
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b2:	d204      	bcs.n	80030be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	e0b6      	b.n	800322c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030c4:	e0b2      	b.n	800322c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ce:	d15e      	bne.n	800318e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80030d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d828      	bhi.n	800312a <UART_SetConfig+0x44a>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <UART_SetConfig+0x400>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	08003105 	.word	0x08003105
 80030e4:	0800310d 	.word	0x0800310d
 80030e8:	08003115 	.word	0x08003115
 80030ec:	0800312b 	.word	0x0800312b
 80030f0:	0800311b 	.word	0x0800311b
 80030f4:	0800312b 	.word	0x0800312b
 80030f8:	0800312b 	.word	0x0800312b
 80030fc:	0800312b 	.word	0x0800312b
 8003100:	08003123 	.word	0x08003123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003104:	f7fe fd48 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8003108:	61f8      	str	r0, [r7, #28]
        break;
 800310a:	e014      	b.n	8003136 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800310c:	f7fe fd5a 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8003110:	61f8      	str	r0, [r7, #28]
        break;
 8003112:	e010      	b.n	8003136 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003114:	4b4d      	ldr	r3, [pc, #308]	; (800324c <UART_SetConfig+0x56c>)
 8003116:	61fb      	str	r3, [r7, #28]
        break;
 8003118:	e00d      	b.n	8003136 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800311a:	f7fe fca5 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 800311e:	61f8      	str	r0, [r7, #28]
        break;
 8003120:	e009      	b.n	8003136 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003126:	61fb      	str	r3, [r7, #28]
        break;
 8003128:	e005      	b.n	8003136 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d077      	beq.n	800322c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005a      	lsls	r2, r3, #1
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	441a      	add	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	d916      	bls.n	8003186 <UART_SetConfig+0x4a6>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d212      	bcs.n	8003186 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f023 030f 	bic.w	r3, r3, #15
 8003168:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	b29b      	uxth	r3, r3
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	b29a      	uxth	r2, r3
 8003176:	8afb      	ldrh	r3, [r7, #22]
 8003178:	4313      	orrs	r3, r2
 800317a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	8afa      	ldrh	r2, [r7, #22]
 8003182:	60da      	str	r2, [r3, #12]
 8003184:	e052      	b.n	800322c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800318c:	e04e      	b.n	800322c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800318e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003192:	2b08      	cmp	r3, #8
 8003194:	d827      	bhi.n	80031e6 <UART_SetConfig+0x506>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <UART_SetConfig+0x4bc>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	080031c9 	.word	0x080031c9
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	080031e7 	.word	0x080031e7
 80031ac:	080031d7 	.word	0x080031d7
 80031b0:	080031e7 	.word	0x080031e7
 80031b4:	080031e7 	.word	0x080031e7
 80031b8:	080031e7 	.word	0x080031e7
 80031bc:	080031df 	.word	0x080031df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c0:	f7fe fcea 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 80031c4:	61f8      	str	r0, [r7, #28]
        break;
 80031c6:	e014      	b.n	80031f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031c8:	f7fe fcfc 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 80031cc:	61f8      	str	r0, [r7, #28]
        break;
 80031ce:	e010      	b.n	80031f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d0:	4b1e      	ldr	r3, [pc, #120]	; (800324c <UART_SetConfig+0x56c>)
 80031d2:	61fb      	str	r3, [r7, #28]
        break;
 80031d4:	e00d      	b.n	80031f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d6:	f7fe fc47 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 80031da:	61f8      	str	r0, [r7, #28]
        break;
 80031dc:	e009      	b.n	80031f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e2:	61fb      	str	r3, [r7, #28]
        break;
 80031e4:	e005      	b.n	80031f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031f0:	bf00      	nop
    }

    if (pclk != 0U)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d019      	beq.n	800322c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	085a      	lsrs	r2, r3, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	441a      	add	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	d909      	bls.n	8003226 <UART_SetConfig+0x546>
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d205      	bcs.n	8003226 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	e002      	b.n	800322c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003238:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800323c:	4618      	mov	r0, r3
 800323e:	3728      	adds	r7, #40	; 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003246:	bf00      	nop
 8003248:	40008000 	.word	0x40008000
 800324c:	00f42400 	.word	0x00f42400

08003250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01a      	beq.n	8003366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334e:	d10a      	bne.n	8003366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  }
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af02      	add	r7, sp, #8
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033a4:	f7fd fb70 	bl	8000a88 <HAL_GetTick>
 80033a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d10e      	bne.n	80033d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f82d 	bl	8003426 <UART_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e023      	b.n	800341e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d10e      	bne.n	8003402 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f817 	bl	8003426 <UART_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e00d      	b.n	800341e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b09c      	sub	sp, #112	; 0x70
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003436:	e0a5      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800343e:	f000 80a1 	beq.w	8003584 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003442:	f7fd fb21 	bl	8000a88 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <UART_WaitOnFlagUntilTimeout+0x32>
 8003452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003454:	2b00      	cmp	r3, #0
 8003456:	d13e      	bne.n	80034d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003468:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800346c:	667b      	str	r3, [r7, #100]	; 0x64
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003476:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003478:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800347c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e6      	bne.n	8003458 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3308      	adds	r3, #8
 8003490:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003494:	e853 3f00 	ldrex	r3, [r3]
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	663b      	str	r3, [r7, #96]	; 0x60
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3308      	adds	r3, #8
 80034a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80034ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e5      	bne.n	800348a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e067      	b.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d04f      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f2:	d147      	bne.n	8003584 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
 800351e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003524:	e841 2300 	strex	r3, r2, [r1]
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e6      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3308      	adds	r3, #8
 8003536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	613b      	str	r3, [r7, #16]
   return(result);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	66bb      	str	r3, [r7, #104]	; 0x68
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3308      	adds	r3, #8
 800354e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003550:	623a      	str	r2, [r7, #32]
 8003552:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	69f9      	ldr	r1, [r7, #28]
 8003556:	6a3a      	ldr	r2, [r7, #32]
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	61bb      	str	r3, [r7, #24]
   return(result);
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e5      	bne.n	8003530 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e010      	b.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	429a      	cmp	r2, r3
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	429a      	cmp	r2, r3
 80035a0:	f43f af4a 	beq.w	8003438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3770      	adds	r7, #112	; 0x70
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <SysTick_Handler+0x1c>)
 80035b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80035b8:	f001 fc66 	bl	8004e88 <xTaskGetSchedulerState>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80035c2:	f002 fa51 	bl	8005a68 <xPortSysTickHandler>
  }
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	e000e010 	.word	0xe000e010

080035d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <vApplicationGetIdleTaskMemory+0x2c>)
 80035e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4a06      	ldr	r2, [pc, #24]	; (8003600 <vApplicationGetIdleTaskMemory+0x30>)
 80035e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2280      	movs	r2, #128	; 0x80
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000120 	.word	0x20000120
 8003600:	2000017c 	.word	0x2000017c

08003604 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a07      	ldr	r2, [pc, #28]	; (8003630 <vApplicationGetTimerTaskMemory+0x2c>)
 8003614:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4a06      	ldr	r2, [pc, #24]	; (8003634 <vApplicationGetTimerTaskMemory+0x30>)
 800361a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003622:	601a      	str	r2, [r3, #0]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	2000037c 	.word	0x2000037c
 8003634:	200003d8 	.word	0x200003d8

08003638 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f103 0208 	add.w	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003650:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f103 0208 	add.w	r2, r3, #8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f103 0208 	add.w	r2, r3, #8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f0:	d103      	bne.n	80036fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e00c      	b.n	8003714 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3308      	adds	r3, #8
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e002      	b.n	8003708 <vListInsert+0x2e>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	429a      	cmp	r2, r3
 8003712:	d2f6      	bcs.n	8003702 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	601a      	str	r2, [r3, #0]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6892      	ldr	r2, [r2, #8]
 8003762:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6852      	ldr	r2, [r2, #4]
 800376c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d103      	bne.n	8003780 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1e5a      	subs	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037ca:	f002 f8bb 	bl	8005944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	68f9      	ldr	r1, [r7, #12]
 80037d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	441a      	add	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	3b01      	subs	r3, #1
 80037fc:	68f9      	ldr	r1, [r7, #12]
 80037fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	441a      	add	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	22ff      	movs	r2, #255	; 0xff
 800380e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	22ff      	movs	r2, #255	; 0xff
 8003816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d114      	bne.n	800384a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01a      	beq.n	800385e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3310      	adds	r3, #16
 800382c:	4618      	mov	r0, r3
 800382e:	f001 f96d 	bl	8004b0c <xTaskRemoveFromEventList>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d012      	beq.n	800385e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <xQueueGenericReset+0xcc>)
 800383a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	e009      	b.n	800385e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3310      	adds	r3, #16
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fef2 	bl	8003638 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3324      	adds	r3, #36	; 0x24
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff feed 	bl	8003638 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800385e:	f002 f8a1 	bl	80059a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003862:	2301      	movs	r3, #1
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08e      	sub	sp, #56	; 0x38
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <xQueueGenericCreateStatic+0x52>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <xQueueGenericCreateStatic+0x56>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <xQueueGenericCreateStatic+0x58>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	623b      	str	r3, [r7, #32]
}
 80038de:	bf00      	nop
 80038e0:	e7fe      	b.n	80038e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <xQueueGenericCreateStatic+0x7e>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <xQueueGenericCreateStatic+0x82>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <xQueueGenericCreateStatic+0x84>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	61fb      	str	r3, [r7, #28]
}
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800390e:	2350      	movs	r3, #80	; 0x50
 8003910:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b50      	cmp	r3, #80	; 0x50
 8003916:	d00a      	beq.n	800392e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	61bb      	str	r3, [r7, #24]
}
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800392e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003942:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	4613      	mov	r3, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f805 	bl	8003960 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003958:	4618      	mov	r0, r3
 800395a:	3730      	adds	r7, #48	; 0x30
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d103      	bne.n	800397c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e002      	b.n	8003982 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800398e:	2101      	movs	r1, #1
 8003990:	69b8      	ldr	r0, [r7, #24]
 8003992:	f7ff ff05 	bl	80037a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08e      	sub	sp, #56	; 0x38
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039b6:	2300      	movs	r3, #0
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xQueueGenericSend+0x32>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <xQueueGenericSend+0x40>
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <xQueueGenericSend+0x44>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <xQueueGenericSend+0x46>
 80039ec:	2300      	movs	r3, #0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <xQueueGenericSend+0x60>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a04:	bf00      	nop
 8003a06:	e7fe      	b.n	8003a06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d103      	bne.n	8003a16 <xQueueGenericSend+0x6e>
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <xQueueGenericSend+0x72>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueGenericSend+0x74>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xQueueGenericSend+0x8e>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	623b      	str	r3, [r7, #32]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a36:	f001 fa27 	bl	8004e88 <xTaskGetSchedulerState>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <xQueueGenericSend+0x9e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <xQueueGenericSend+0xa2>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <xQueueGenericSend+0xa4>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <xQueueGenericSend+0xbe>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	61fb      	str	r3, [r7, #28]
}
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a66:	f001 ff6d 	bl	8005944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d302      	bcc.n	8003a7c <xQueueGenericSend+0xd4>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d129      	bne.n	8003ad0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a82:	f000 fa0b 	bl	8003e9c <prvCopyDataToQueue>
 8003a86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	3324      	adds	r3, #36	; 0x24
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 f839 	bl	8004b0c <xTaskRemoveFromEventList>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003aa0:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <xQueueGenericSend+0x1f8>)
 8003aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	e00a      	b.n	8003ac8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ab8:	4b39      	ldr	r3, [pc, #228]	; (8003ba0 <xQueueGenericSend+0x1f8>)
 8003aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ac8:	f001 ff6c 	bl	80059a4 <vPortExitCritical>
				return pdPASS;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e063      	b.n	8003b98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ad6:	f001 ff65 	bl	80059a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e05c      	b.n	8003b98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 f873 	bl	8004bd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003af2:	f001 ff57 	bl	80059a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003af6:	f000 fde5 	bl	80046c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003afa:	f001 ff23 	bl	8005944 <vPortEnterCritical>
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b0a:	d103      	bne.n	8003b14 <xQueueGenericSend+0x16c>
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b20:	d103      	bne.n	8003b2a <xQueueGenericSend+0x182>
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b2a:	f001 ff3b 	bl	80059a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b2e:	1d3a      	adds	r2, r7, #4
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 f862 	bl	8004c00 <xTaskCheckForTimeOut>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d124      	bne.n	8003b8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b44:	f000 faa2 	bl	800408c <prvIsQueueFull>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	3310      	adds	r3, #16
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4611      	mov	r1, r2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 ff88 	bl	8004a6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b5e:	f000 fa2d 	bl	8003fbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b62:	f000 fdbd 	bl	80046e0 <xTaskResumeAll>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f47f af7c 	bne.w	8003a66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <xQueueGenericSend+0x1f8>)
 8003b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	e772      	b.n	8003a66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b82:	f000 fa1b 	bl	8003fbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b86:	f000 fdab 	bl	80046e0 <xTaskResumeAll>
 8003b8a:	e76c      	b.n	8003a66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b8e:	f000 fa15 	bl	8003fbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b92:	f000 fda5 	bl	80046e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3738      	adds	r7, #56	; 0x38
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	e000ed04 	.word	0xe000ed04

08003ba4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b090      	sub	sp, #64	; 0x40
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <xQueueGenericSendFromISR+0x3c>
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <xQueueGenericSendFromISR+0x40>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <xQueueGenericSendFromISR+0x42>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d103      	bne.n	8003c0e <xQueueGenericSendFromISR+0x6a>
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <xQueueGenericSendFromISR+0x6e>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <xQueueGenericSendFromISR+0x70>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	623b      	str	r3, [r7, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c2e:	f001 ff6b 	bl	8005b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c32:	f3ef 8211 	mrs	r2, BASEPRI
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	61fa      	str	r2, [r7, #28]
 8003c48:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <xQueueGenericSendFromISR+0xbc>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d12f      	bne.n	8003cc0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c76:	f000 f911 	bl	8003e9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c82:	d112      	bne.n	8003caa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d016      	beq.n	8003cba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	3324      	adds	r3, #36	; 0x24
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 ff3b 	bl	8004b0c <xTaskRemoveFromEventList>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e007      	b.n	8003cba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003caa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cae:	3301      	adds	r3, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	b25a      	sxtb	r2, r3
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003cbe:	e001      	b.n	8003cc4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3740      	adds	r7, #64	; 0x40
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <xQueueReceive+0x30>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	623b      	str	r3, [r7, #32]
}
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <xQueueReceive+0x3e>
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <xQueueReceive+0x42>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <xQueueReceive+0x44>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <xQueueReceive+0x5e>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	61fb      	str	r3, [r7, #28]
}
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d3a:	f001 f8a5 	bl	8004e88 <xTaskGetSchedulerState>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <xQueueReceive+0x6e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <xQueueReceive+0x72>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <xQueueReceive+0x74>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <xQueueReceive+0x8e>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	61bb      	str	r3, [r7, #24]
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d6a:	f001 fdeb 	bl	8005944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d01f      	beq.n	8003dba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d7e:	f000 f8f7 	bl	8003f70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00f      	beq.n	8003db2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	3310      	adds	r3, #16
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 feb8 	bl	8004b0c <xTaskRemoveFromEventList>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003da2:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <xQueueReceive+0x1bc>)
 8003da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003db2:	f001 fdf7 	bl	80059a4 <vPortExitCritical>
				return pdPASS;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e069      	b.n	8003e8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dc0:	f001 fdf0 	bl	80059a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e062      	b.n	8003e8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dce:	f107 0310 	add.w	r3, r7, #16
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fefe 	bl	8004bd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ddc:	f001 fde2 	bl	80059a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003de0:	f000 fc70 	bl	80046c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003de4:	f001 fdae 	bl	8005944 <vPortEnterCritical>
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dee:	b25b      	sxtb	r3, r3
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003df4:	d103      	bne.n	8003dfe <xQueueReceive+0x122>
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e04:	b25b      	sxtb	r3, r3
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0a:	d103      	bne.n	8003e14 <xQueueReceive+0x138>
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e14:	f001 fdc6 	bl	80059a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e18:	1d3a      	adds	r2, r7, #4
 8003e1a:	f107 0310 	add.w	r3, r7, #16
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 feed 	bl	8004c00 <xTaskCheckForTimeOut>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d123      	bne.n	8003e74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e2e:	f000 f917 	bl	8004060 <prvIsQueueEmpty>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d017      	beq.n	8003e68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	3324      	adds	r3, #36	; 0x24
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fe13 	bl	8004a6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e48:	f000 f8b8 	bl	8003fbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e4c:	f000 fc48 	bl	80046e0 <xTaskResumeAll>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d189      	bne.n	8003d6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <xQueueReceive+0x1bc>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	e780      	b.n	8003d6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e6a:	f000 f8a7 	bl	8003fbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e6e:	f000 fc37 	bl	80046e0 <xTaskResumeAll>
 8003e72:	e77a      	b.n	8003d6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e76:	f000 f8a1 	bl	8003fbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e7a:	f000 fc31 	bl	80046e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e80:	f000 f8ee 	bl	8004060 <prvIsQueueEmpty>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f43f af6f 	beq.w	8003d6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3730      	adds	r7, #48	; 0x30
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d14d      	bne.n	8003f5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fffc 	bl	8004ec4 <xTaskPriorityDisinherit>
 8003ecc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	e043      	b.n	8003f5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d119      	bne.n	8003f10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6858      	ldr	r0, [r3, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	f002 f85c 	bl	8005fa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	441a      	add	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d32b      	bcc.n	8003f5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	e026      	b.n	8003f5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68d8      	ldr	r0, [r3, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	461a      	mov	r2, r3
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	f002 f842 	bl	8005fa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	425b      	negs	r3, r3
 8003f2a:	441a      	add	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d207      	bcs.n	8003f4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	425b      	negs	r3, r3
 8003f46:	441a      	add	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d105      	bne.n	8003f5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f66:	697b      	ldr	r3, [r7, #20]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d018      	beq.n	8003fb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	441a      	add	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d303      	bcc.n	8003fa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68d9      	ldr	r1, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	461a      	mov	r2, r3
 8003fae:	6838      	ldr	r0, [r7, #0]
 8003fb0:	f001 fff8 	bl	8005fa4 <memcpy>
	}
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fc4:	f001 fcbe 	bl	8005944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fd0:	e011      	b.n	8003ff6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d012      	beq.n	8004000 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3324      	adds	r3, #36	; 0x24
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fd94 	bl	8004b0c <xTaskRemoveFromEventList>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fea:	f000 fe6b 	bl	8004cc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	dce9      	bgt.n	8003fd2 <prvUnlockQueue+0x16>
 8003ffe:	e000      	b.n	8004002 <prvUnlockQueue+0x46>
					break;
 8004000:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	22ff      	movs	r2, #255	; 0xff
 8004006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800400a:	f001 fccb 	bl	80059a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800400e:	f001 fc99 	bl	8005944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004018:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800401a:	e011      	b.n	8004040 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d012      	beq.n	800404a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3310      	adds	r3, #16
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fd6f 	bl	8004b0c <xTaskRemoveFromEventList>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004034:	f000 fe46 	bl	8004cc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004038:	7bbb      	ldrb	r3, [r7, #14]
 800403a:	3b01      	subs	r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004044:	2b00      	cmp	r3, #0
 8004046:	dce9      	bgt.n	800401c <prvUnlockQueue+0x60>
 8004048:	e000      	b.n	800404c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800404a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	22ff      	movs	r2, #255	; 0xff
 8004050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004054:	f001 fca6 	bl	80059a4 <vPortExitCritical>
}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004068:	f001 fc6c 	bl	8005944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004074:	2301      	movs	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e001      	b.n	800407e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800407e:	f001 fc91 	bl	80059a4 <vPortExitCritical>

	return xReturn;
 8004082:	68fb      	ldr	r3, [r7, #12]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004094:	f001 fc56 	bl	8005944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d102      	bne.n	80040aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040a4:	2301      	movs	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e001      	b.n	80040ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040ae:	f001 fc79 	bl	80059a4 <vPortExitCritical>

	return xReturn;
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e014      	b.n	80040f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040cc:	4a0f      	ldr	r2, [pc, #60]	; (800410c <vQueueAddToRegistry+0x50>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040d8:	490c      	ldr	r1, [pc, #48]	; (800410c <vQueueAddToRegistry+0x50>)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040e2:	4a0a      	ldr	r2, [pc, #40]	; (800410c <vQueueAddToRegistry+0x50>)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	4413      	add	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040ee:	e006      	b.n	80040fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3301      	adds	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b07      	cmp	r3, #7
 80040fa:	d9e7      	bls.n	80040cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	200007d8 	.word	0x200007d8

08004110 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004120:	f001 fc10 	bl	8005944 <vPortEnterCritical>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800412a:	b25b      	sxtb	r3, r3
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004130:	d103      	bne.n	800413a <vQueueWaitForMessageRestricted+0x2a>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004140:	b25b      	sxtb	r3, r3
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004146:	d103      	bne.n	8004150 <vQueueWaitForMessageRestricted+0x40>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004150:	f001 fc28 	bl	80059a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	3324      	adds	r3, #36	; 0x24
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fca5 	bl	8004ab4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800416a:	6978      	ldr	r0, [r7, #20]
 800416c:	f7ff ff26 	bl	8003fbc <prvUnlockQueue>
	}
 8004170:	bf00      	nop
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	; 0x38
 800417c:	af04      	add	r7, sp, #16
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10a      	bne.n	80041a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	623b      	str	r3, [r7, #32]
}
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <xTaskCreateStatic+0x46>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	61fb      	str	r3, [r7, #28]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041be:	235c      	movs	r3, #92	; 0x5c
 80041c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b5c      	cmp	r3, #92	; 0x5c
 80041c6:	d00a      	beq.n	80041de <xTaskCreateStatic+0x66>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	61bb      	str	r3, [r7, #24]
}
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01e      	beq.n	8004224 <xTaskCreateStatic+0xac>
 80041e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01b      	beq.n	8004224 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041fe:	2300      	movs	r3, #0
 8004200:	9303      	str	r3, [sp, #12]
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	9302      	str	r3, [sp, #8]
 8004206:	f107 0314 	add.w	r3, r7, #20
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f850 	bl	80042bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800421c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800421e:	f000 f8dd 	bl	80043dc <prvAddNewTaskToReadyList>
 8004222:	e001      	b.n	8004228 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004228:	697b      	ldr	r3, [r7, #20]
	}
 800422a:	4618      	mov	r0, r3
 800422c:	3728      	adds	r7, #40	; 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004232:	b580      	push	{r7, lr}
 8004234:	b08c      	sub	sp, #48	; 0x30
 8004236:	af04      	add	r7, sp, #16
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4618      	mov	r0, r3
 8004248:	f001 fc9e 	bl	8005b88 <pvPortMalloc>
 800424c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00e      	beq.n	8004272 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004254:	205c      	movs	r0, #92	; 0x5c
 8004256:	f001 fc97 	bl	8005b88 <pvPortMalloc>
 800425a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
 8004268:	e005      	b.n	8004276 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800426a:	6978      	ldr	r0, [r7, #20]
 800426c:	f001 fd58 	bl	8005d20 <vPortFree>
 8004270:	e001      	b.n	8004276 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d017      	beq.n	80042ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004284:	88fa      	ldrh	r2, [r7, #6]
 8004286:	2300      	movs	r3, #0
 8004288:	9303      	str	r3, [sp, #12]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	9302      	str	r3, [sp, #8]
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f80e 	bl	80042bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042a0:	69f8      	ldr	r0, [r7, #28]
 80042a2:	f000 f89b 	bl	80043dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042a6:	2301      	movs	r3, #1
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	e002      	b.n	80042b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042b2:	69bb      	ldr	r3, [r7, #24]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	461a      	mov	r2, r3
 80042d4:	21a5      	movs	r1, #165	; 0xa5
 80042d6:	f001 fe73 	bl	8005fc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042e4:	3b01      	subs	r3, #1
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	f023 0307 	bic.w	r3, r3, #7
 80042f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <prvInitialiseNewTask+0x58>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	617b      	str	r3, [r7, #20]
}
 8004310:	bf00      	nop
 8004312:	e7fe      	b.n	8004312 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01f      	beq.n	800435a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e012      	b.n	8004346 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	7819      	ldrb	r1, [r3, #0]
 8004328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	3334      	adds	r3, #52	; 0x34
 8004330:	460a      	mov	r2, r1
 8004332:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	4413      	add	r3, r2
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	3301      	adds	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	2b0f      	cmp	r3, #15
 800434a:	d9e9      	bls.n	8004320 <prvInitialiseNewTask+0x64>
 800434c:	e000      	b.n	8004350 <prvInitialiseNewTask+0x94>
			{
				break;
 800434e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004358:	e003      	b.n	8004362 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	2b37      	cmp	r3, #55	; 0x37
 8004366:	d901      	bls.n	800436c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004368:	2337      	movs	r3, #55	; 0x37
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004376:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	2200      	movs	r2, #0
 800437c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	3304      	adds	r3, #4
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff f978 	bl	8003678 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	3318      	adds	r3, #24
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff f973 	bl	8003678 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004396:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	2200      	movs	r2, #0
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	68f9      	ldr	r1, [r7, #12]
 80043ba:	69b8      	ldr	r0, [r7, #24]
 80043bc:	f001 f992 	bl	80056e4 <pxPortInitialiseStack>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043d2:	bf00      	nop
 80043d4:	3720      	adds	r7, #32
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043e4:	f001 faae 	bl	8005944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043e8:	4b2d      	ldr	r3, [pc, #180]	; (80044a0 <prvAddNewTaskToReadyList+0xc4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3301      	adds	r3, #1
 80043ee:	4a2c      	ldr	r2, [pc, #176]	; (80044a0 <prvAddNewTaskToReadyList+0xc4>)
 80043f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043f2:	4b2c      	ldr	r3, [pc, #176]	; (80044a4 <prvAddNewTaskToReadyList+0xc8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043fa:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <prvAddNewTaskToReadyList+0xc8>)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <prvAddNewTaskToReadyList+0xc4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d110      	bne.n	800442a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004408:	f000 fc80 	bl	8004d0c <prvInitialiseTaskLists>
 800440c:	e00d      	b.n	800442a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <prvAddNewTaskToReadyList+0xcc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004416:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <prvAddNewTaskToReadyList+0xc8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	429a      	cmp	r2, r3
 8004422:	d802      	bhi.n	800442a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004424:	4a1f      	ldr	r2, [pc, #124]	; (80044a4 <prvAddNewTaskToReadyList+0xc8>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <prvAddNewTaskToReadyList+0xd0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3301      	adds	r3, #1
 8004430:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <prvAddNewTaskToReadyList+0xd0>)
 8004432:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004434:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <prvAddNewTaskToReadyList+0xd0>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <prvAddNewTaskToReadyList+0xd4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d903      	bls.n	8004450 <prvAddNewTaskToReadyList+0x74>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <prvAddNewTaskToReadyList+0xd4>)
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <prvAddNewTaskToReadyList+0xd8>)
 800445e:	441a      	add	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f7ff f913 	bl	8003692 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800446c:	f001 fa9a 	bl	80059a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004470:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <prvAddNewTaskToReadyList+0xcc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00e      	beq.n	8004496 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <prvAddNewTaskToReadyList+0xc8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	429a      	cmp	r2, r3
 8004484:	d207      	bcs.n	8004496 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004486:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <prvAddNewTaskToReadyList+0xdc>)
 8004488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000cec 	.word	0x20000cec
 80044a4:	20000818 	.word	0x20000818
 80044a8:	20000cf8 	.word	0x20000cf8
 80044ac:	20000d08 	.word	0x20000d08
 80044b0:	20000cf4 	.word	0x20000cf4
 80044b4:	2000081c 	.word	0x2000081c
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b37      	cmp	r3, #55	; 0x37
 80044ce:	d90a      	bls.n	80044e6 <vTaskPrioritySet+0x2a>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b37      	cmp	r3, #55	; 0x37
 80044ea:	d901      	bls.n	80044f0 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044ec:	2337      	movs	r3, #55	; 0x37
 80044ee:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80044f0:	f001 fa28 	bl	8005944 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <vTaskPrioritySet+0x44>
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <vTaskPrioritySet+0x12c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	e000      	b.n	8004502 <vTaskPrioritySet+0x46>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004508:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d063      	beq.n	80045da <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	429a      	cmp	r2, r3
 8004518:	d90d      	bls.n	8004536 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800451a:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <vTaskPrioritySet+0x12c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	429a      	cmp	r2, r3
 8004522:	d00f      	beq.n	8004544 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8004524:	4b30      	ldr	r3, [pc, #192]	; (80045e8 <vTaskPrioritySet+0x12c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d309      	bcc.n	8004544 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	e006      	b.n	8004544 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8004536:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <vTaskPrioritySet+0x12c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	429a      	cmp	r2, r3
 800453e:	d101      	bne.n	8004544 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8004540:	2301      	movs	r3, #1
 8004542:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	429a      	cmp	r2, r3
 8004554:	d102      	bne.n	800455c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db04      	blt.n	8004574 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	6959      	ldr	r1, [r3, #20]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4a1a      	ldr	r2, [pc, #104]	; (80045ec <vTaskPrioritySet+0x130>)
 8004584:	4413      	add	r3, r2
 8004586:	4299      	cmp	r1, r3
 8004588:	d11c      	bne.n	80045c4 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	3304      	adds	r3, #4
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff f8dc 	bl	800374c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <vTaskPrioritySet+0x134>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d903      	bls.n	80045a8 <vTaskPrioritySet+0xec>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <vTaskPrioritySet+0x134>)
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <vTaskPrioritySet+0x130>)
 80045b6:	441a      	add	r2, r3
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f7ff f867 	bl	8003692 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <vTaskPrioritySet+0x138>)
 80045cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80045da:	f001 f9e3 	bl	80059a4 <vPortExitCritical>
	}
 80045de:	bf00      	nop
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000818 	.word	0x20000818
 80045ec:	2000081c 	.word	0x2000081c
 80045f0:	20000cf4 	.word	0x20000cf4
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004606:	463a      	mov	r2, r7
 8004608:	1d39      	adds	r1, r7, #4
 800460a:	f107 0308 	add.w	r3, r7, #8
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe ffde 	bl	80035d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	9202      	str	r2, [sp, #8]
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	2300      	movs	r3, #0
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	2300      	movs	r3, #0
 8004624:	460a      	mov	r2, r1
 8004626:	4921      	ldr	r1, [pc, #132]	; (80046ac <vTaskStartScheduler+0xb4>)
 8004628:	4821      	ldr	r0, [pc, #132]	; (80046b0 <vTaskStartScheduler+0xb8>)
 800462a:	f7ff fda5 	bl	8004178 <xTaskCreateStatic>
 800462e:	4603      	mov	r3, r0
 8004630:	4a20      	ldr	r2, [pc, #128]	; (80046b4 <vTaskStartScheduler+0xbc>)
 8004632:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004634:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <vTaskStartScheduler+0xbc>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800463c:	2301      	movs	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e001      	b.n	8004646 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d102      	bne.n	8004652 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800464c:	f000 fcfc 	bl	8005048 <xTimerCreateTimerTask>
 8004650:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d116      	bne.n	8004686 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	613b      	str	r3, [r7, #16]
}
 800466a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800466c:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <vTaskStartScheduler+0xc0>)
 800466e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004672:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004674:	4b11      	ldr	r3, [pc, #68]	; (80046bc <vTaskStartScheduler+0xc4>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800467a:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <vTaskStartScheduler+0xc8>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004680:	f001 f8be 	bl	8005800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004684:	e00e      	b.n	80046a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800468c:	d10a      	bne.n	80046a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60fb      	str	r3, [r7, #12]
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <vTaskStartScheduler+0xaa>
}
 80046a4:	bf00      	nop
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	0800604c 	.word	0x0800604c
 80046b0:	08004cdd 	.word	0x08004cdd
 80046b4:	20000d10 	.word	0x20000d10
 80046b8:	20000d0c 	.word	0x20000d0c
 80046bc:	20000cf8 	.word	0x20000cf8
 80046c0:	20000cf0 	.word	0x20000cf0

080046c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046c8:	4b04      	ldr	r3, [pc, #16]	; (80046dc <vTaskSuspendAll+0x18>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	4a03      	ldr	r2, [pc, #12]	; (80046dc <vTaskSuspendAll+0x18>)
 80046d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046d2:	bf00      	nop
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	20000d14 	.word	0x20000d14

080046e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046ee:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <xTaskResumeAll+0x118>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <xTaskResumeAll+0x2c>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	603b      	str	r3, [r7, #0]
}
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800470c:	f001 f91a 	bl	8005944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004710:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <xTaskResumeAll+0x118>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3b01      	subs	r3, #1
 8004716:	4a38      	ldr	r2, [pc, #224]	; (80047f8 <xTaskResumeAll+0x118>)
 8004718:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800471a:	4b37      	ldr	r3, [pc, #220]	; (80047f8 <xTaskResumeAll+0x118>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d162      	bne.n	80047e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004722:	4b36      	ldr	r3, [pc, #216]	; (80047fc <xTaskResumeAll+0x11c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d05e      	beq.n	80047e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800472a:	e02f      	b.n	800478c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800472c:	4b34      	ldr	r3, [pc, #208]	; (8004800 <xTaskResumeAll+0x120>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3318      	adds	r3, #24
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff f807 	bl	800374c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3304      	adds	r3, #4
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff f802 	bl	800374c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474c:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <xTaskResumeAll+0x124>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d903      	bls.n	800475c <xTaskResumeAll+0x7c>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <xTaskResumeAll+0x124>)
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4a27      	ldr	r2, [pc, #156]	; (8004808 <xTaskResumeAll+0x128>)
 800476a:	441a      	add	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3304      	adds	r3, #4
 8004770:	4619      	mov	r1, r3
 8004772:	4610      	mov	r0, r2
 8004774:	f7fe ff8d 	bl	8003692 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477c:	4b23      	ldr	r3, [pc, #140]	; (800480c <xTaskResumeAll+0x12c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <xTaskResumeAll+0x130>)
 8004788:	2201      	movs	r2, #1
 800478a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800478c:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <xTaskResumeAll+0x120>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1cb      	bne.n	800472c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800479a:	f000 fb55 	bl	8004e48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <xTaskResumeAll+0x134>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d010      	beq.n	80047cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047aa:	f000 f847 	bl	800483c <xTaskIncrementTick>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047b4:	4b16      	ldr	r3, [pc, #88]	; (8004810 <xTaskResumeAll+0x130>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3b01      	subs	r3, #1
 80047be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f1      	bne.n	80047aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047c6:	4b13      	ldr	r3, [pc, #76]	; (8004814 <xTaskResumeAll+0x134>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <xTaskResumeAll+0x130>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <xTaskResumeAll+0x138>)
 80047da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047e8:	f001 f8dc 	bl	80059a4 <vPortExitCritical>

	return xAlreadyYielded;
 80047ec:	68bb      	ldr	r3, [r7, #8]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000d14 	.word	0x20000d14
 80047fc:	20000cec 	.word	0x20000cec
 8004800:	20000cac 	.word	0x20000cac
 8004804:	20000cf4 	.word	0x20000cf4
 8004808:	2000081c 	.word	0x2000081c
 800480c:	20000818 	.word	0x20000818
 8004810:	20000d00 	.word	0x20000d00
 8004814:	20000cfc 	.word	0x20000cfc
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <xTaskGetTickCount+0x1c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004828:	687b      	ldr	r3, [r7, #4]
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000cf0 	.word	0x20000cf0

0800483c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004846:	4b4f      	ldr	r3, [pc, #316]	; (8004984 <xTaskIncrementTick+0x148>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f040 808f 	bne.w	800496e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004850:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <xTaskIncrementTick+0x14c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004858:	4a4b      	ldr	r2, [pc, #300]	; (8004988 <xTaskIncrementTick+0x14c>)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d120      	bne.n	80048a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004864:	4b49      	ldr	r3, [pc, #292]	; (800498c <xTaskIncrementTick+0x150>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <xTaskIncrementTick+0x48>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	603b      	str	r3, [r7, #0]
}
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <xTaskIncrementTick+0x46>
 8004884:	4b41      	ldr	r3, [pc, #260]	; (800498c <xTaskIncrementTick+0x150>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	4b41      	ldr	r3, [pc, #260]	; (8004990 <xTaskIncrementTick+0x154>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a3f      	ldr	r2, [pc, #252]	; (800498c <xTaskIncrementTick+0x150>)
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4a3f      	ldr	r2, [pc, #252]	; (8004990 <xTaskIncrementTick+0x154>)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4b3e      	ldr	r3, [pc, #248]	; (8004994 <xTaskIncrementTick+0x158>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	4a3d      	ldr	r2, [pc, #244]	; (8004994 <xTaskIncrementTick+0x158>)
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	f000 fad1 	bl	8004e48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048a6:	4b3c      	ldr	r3, [pc, #240]	; (8004998 <xTaskIncrementTick+0x15c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d349      	bcc.n	8004944 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b0:	4b36      	ldr	r3, [pc, #216]	; (800498c <xTaskIncrementTick+0x150>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ba:	4b37      	ldr	r3, [pc, #220]	; (8004998 <xTaskIncrementTick+0x15c>)
 80048bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048c0:	601a      	str	r2, [r3, #0]
					break;
 80048c2:	e03f      	b.n	8004944 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c4:	4b31      	ldr	r3, [pc, #196]	; (800498c <xTaskIncrementTick+0x150>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d203      	bcs.n	80048e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048dc:	4a2e      	ldr	r2, [pc, #184]	; (8004998 <xTaskIncrementTick+0x15c>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048e2:	e02f      	b.n	8004944 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe ff2f 	bl	800374c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	3318      	adds	r3, #24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe ff26 	bl	800374c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	4b25      	ldr	r3, [pc, #148]	; (800499c <xTaskIncrementTick+0x160>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d903      	bls.n	8004914 <xTaskIncrementTick+0xd8>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	4a22      	ldr	r2, [pc, #136]	; (800499c <xTaskIncrementTick+0x160>)
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <xTaskIncrementTick+0x164>)
 8004922:	441a      	add	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f7fe feb1 	bl	8003692 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004934:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <xTaskIncrementTick+0x168>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	429a      	cmp	r2, r3
 800493c:	d3b8      	bcc.n	80048b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800493e:	2301      	movs	r3, #1
 8004940:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004942:	e7b5      	b.n	80048b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004944:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <xTaskIncrementTick+0x168>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494a:	4915      	ldr	r1, [pc, #84]	; (80049a0 <xTaskIncrementTick+0x164>)
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d901      	bls.n	8004960 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <xTaskIncrementTick+0x16c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e004      	b.n	8004978 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <xTaskIncrementTick+0x170>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	4a0d      	ldr	r2, [pc, #52]	; (80049ac <xTaskIncrementTick+0x170>)
 8004976:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004978:	697b      	ldr	r3, [r7, #20]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000d14 	.word	0x20000d14
 8004988:	20000cf0 	.word	0x20000cf0
 800498c:	20000ca4 	.word	0x20000ca4
 8004990:	20000ca8 	.word	0x20000ca8
 8004994:	20000d04 	.word	0x20000d04
 8004998:	20000d0c 	.word	0x20000d0c
 800499c:	20000cf4 	.word	0x20000cf4
 80049a0:	2000081c 	.word	0x2000081c
 80049a4:	20000818 	.word	0x20000818
 80049a8:	20000d00 	.word	0x20000d00
 80049ac:	20000cfc 	.word	0x20000cfc

080049b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049b6:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <vTaskSwitchContext+0xa8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049be:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <vTaskSwitchContext+0xac>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049c4:	e041      	b.n	8004a4a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80049c6:	4b25      	ldr	r3, [pc, #148]	; (8004a5c <vTaskSwitchContext+0xac>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049cc:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <vTaskSwitchContext+0xb0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e010      	b.n	80049f6 <vTaskSwitchContext+0x46>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	607b      	str	r3, [r7, #4]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <vTaskSwitchContext+0x3e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	491b      	ldr	r1, [pc, #108]	; (8004a64 <vTaskSwitchContext+0xb4>)
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0e4      	beq.n	80049d4 <vTaskSwitchContext+0x24>
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <vTaskSwitchContext+0xb4>)
 8004a16:	4413      	add	r3, r2
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	605a      	str	r2, [r3, #4]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d104      	bne.n	8004a3a <vTaskSwitchContext+0x8a>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <vTaskSwitchContext+0xb8>)
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	4a06      	ldr	r2, [pc, #24]	; (8004a60 <vTaskSwitchContext+0xb0>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6013      	str	r3, [r2, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000d14 	.word	0x20000d14
 8004a5c:	20000d00 	.word	0x20000d00
 8004a60:	20000cf4 	.word	0x20000cf4
 8004a64:	2000081c 	.word	0x2000081c
 8004a68:	20000818 	.word	0x20000818

08004a6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60fb      	str	r3, [r7, #12]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <vTaskPlaceOnEventList+0x44>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3318      	adds	r3, #24
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fe fe1d 	bl	80036da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	6838      	ldr	r0, [r7, #0]
 8004aa4:	f000 fa7c 	bl	8004fa0 <prvAddCurrentTaskToDelayedList>
}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000818 	.word	0x20000818

08004ab4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	617b      	str	r3, [r7, #20]
}
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3318      	adds	r3, #24
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7fe fdd4 	bl	8003692 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004af4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	68b8      	ldr	r0, [r7, #8]
 8004afa:	f000 fa51 	bl	8004fa0 <prvAddCurrentTaskToDelayedList>
	}
 8004afe:	bf00      	nop
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000818 	.word	0x20000818

08004b0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60fb      	str	r3, [r7, #12]
}
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	3318      	adds	r3, #24
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fe fe05 	bl	800374c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b42:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <xTaskRemoveFromEventList+0xb0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11d      	bne.n	8004b86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fdfc 	bl	800374c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <xTaskRemoveFromEventList+0xb4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d903      	bls.n	8004b68 <xTaskRemoveFromEventList+0x5c>
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <xTaskRemoveFromEventList+0xb4>)
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <xTaskRemoveFromEventList+0xb8>)
 8004b76:	441a      	add	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f7fe fd87 	bl	8003692 <vListInsertEnd>
 8004b84:	e005      	b.n	8004b92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3318      	adds	r3, #24
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	480e      	ldr	r0, [pc, #56]	; (8004bc8 <xTaskRemoveFromEventList+0xbc>)
 8004b8e:	f7fe fd80 	bl	8003692 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <xTaskRemoveFromEventList+0xc0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d905      	bls.n	8004bac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <xTaskRemoveFromEventList+0xc4>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e001      	b.n	8004bb0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bb0:	697b      	ldr	r3, [r7, #20]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000d14 	.word	0x20000d14
 8004bc0:	20000cf4 	.word	0x20000cf4
 8004bc4:	2000081c 	.word	0x2000081c
 8004bc8:	20000cac 	.word	0x20000cac
 8004bcc:	20000818 	.word	0x20000818
 8004bd0:	20000d00 	.word	0x20000d00

08004bd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <vTaskInternalSetTimeOutState+0x24>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <vTaskInternalSetTimeOutState+0x28>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	605a      	str	r2, [r3, #4]
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	20000d04 	.word	0x20000d04
 8004bfc:	20000cf0 	.word	0x20000cf0

08004c00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	613b      	str	r3, [r7, #16]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	60fb      	str	r3, [r7, #12]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c42:	f000 fe7f 	bl	8005944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c46:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <xTaskCheckForTimeOut+0xbc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c5e:	d102      	bne.n	8004c66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	e023      	b.n	8004cae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <xTaskCheckForTimeOut+0xc0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d007      	beq.n	8004c82 <xTaskCheckForTimeOut+0x82>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	e015      	b.n	8004cae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d20b      	bcs.n	8004ca4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	1ad2      	subs	r2, r2, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff9b 	bl	8004bd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	e004      	b.n	8004cae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004caa:	2301      	movs	r3, #1
 8004cac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cae:	f000 fe79 	bl	80059a4 <vPortExitCritical>

	return xReturn;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000cf0 	.word	0x20000cf0
 8004cc0:	20000d04 	.word	0x20000d04

08004cc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <vTaskMissedYield+0x14>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	20000d00 	.word	0x20000d00

08004cdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ce4:	f000 f852 	bl	8004d8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <prvIdleTask+0x28>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d9f9      	bls.n	8004ce4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <prvIdleTask+0x2c>)
 8004cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d00:	e7f0      	b.n	8004ce4 <prvIdleTask+0x8>
 8004d02:	bf00      	nop
 8004d04:	2000081c 	.word	0x2000081c
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	e00c      	b.n	8004d32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4a12      	ldr	r2, [pc, #72]	; (8004d6c <prvInitialiseTaskLists+0x60>)
 8004d24:	4413      	add	r3, r2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fc86 	bl	8003638 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b37      	cmp	r3, #55	; 0x37
 8004d36:	d9ef      	bls.n	8004d18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d38:	480d      	ldr	r0, [pc, #52]	; (8004d70 <prvInitialiseTaskLists+0x64>)
 8004d3a:	f7fe fc7d 	bl	8003638 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d3e:	480d      	ldr	r0, [pc, #52]	; (8004d74 <prvInitialiseTaskLists+0x68>)
 8004d40:	f7fe fc7a 	bl	8003638 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d44:	480c      	ldr	r0, [pc, #48]	; (8004d78 <prvInitialiseTaskLists+0x6c>)
 8004d46:	f7fe fc77 	bl	8003638 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d4a:	480c      	ldr	r0, [pc, #48]	; (8004d7c <prvInitialiseTaskLists+0x70>)
 8004d4c:	f7fe fc74 	bl	8003638 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d50:	480b      	ldr	r0, [pc, #44]	; (8004d80 <prvInitialiseTaskLists+0x74>)
 8004d52:	f7fe fc71 	bl	8003638 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <prvInitialiseTaskLists+0x78>)
 8004d58:	4a05      	ldr	r2, [pc, #20]	; (8004d70 <prvInitialiseTaskLists+0x64>)
 8004d5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <prvInitialiseTaskLists+0x7c>)
 8004d5e:	4a05      	ldr	r2, [pc, #20]	; (8004d74 <prvInitialiseTaskLists+0x68>)
 8004d60:	601a      	str	r2, [r3, #0]
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	2000081c 	.word	0x2000081c
 8004d70:	20000c7c 	.word	0x20000c7c
 8004d74:	20000c90 	.word	0x20000c90
 8004d78:	20000cac 	.word	0x20000cac
 8004d7c:	20000cc0 	.word	0x20000cc0
 8004d80:	20000cd8 	.word	0x20000cd8
 8004d84:	20000ca4 	.word	0x20000ca4
 8004d88:	20000ca8 	.word	0x20000ca8

08004d8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d92:	e019      	b.n	8004dc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d94:	f000 fdd6 	bl	8005944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <prvCheckTasksWaitingTermination+0x50>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe fcd1 	bl	800374c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004daa:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <prvCheckTasksWaitingTermination+0x54>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <prvCheckTasksWaitingTermination+0x54>)
 8004db2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <prvCheckTasksWaitingTermination+0x58>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <prvCheckTasksWaitingTermination+0x58>)
 8004dbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dbe:	f000 fdf1 	bl	80059a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f810 	bl	8004de8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <prvCheckTasksWaitingTermination+0x58>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e1      	bne.n	8004d94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000cc0 	.word	0x20000cc0
 8004de0:	20000cec 	.word	0x20000cec
 8004de4:	20000cd4 	.word	0x20000cd4

08004de8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d108      	bne.n	8004e0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 ff8e 	bl	8005d20 <vPortFree>
				vPortFree( pxTCB );
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 ff8b 	bl	8005d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e0a:	e018      	b.n	8004e3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d103      	bne.n	8004e1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 ff82 	bl	8005d20 <vPortFree>
	}
 8004e1c:	e00f      	b.n	8004e3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d00a      	beq.n	8004e3e <prvDeleteTCB+0x56>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	60fb      	str	r3, [r7, #12]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <prvDeleteTCB+0x54>
	}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <prvResetNextTaskUnblockTime+0x38>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <prvResetNextTaskUnblockTime+0x3c>)
 8004e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e60:	e008      	b.n	8004e74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <prvResetNextTaskUnblockTime+0x38>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <prvResetNextTaskUnblockTime+0x3c>)
 8004e72:	6013      	str	r3, [r2, #0]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	20000ca4 	.word	0x20000ca4
 8004e84:	20000d0c 	.word	0x20000d0c

08004e88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <xTaskGetSchedulerState+0x34>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e96:	2301      	movs	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	e008      	b.n	8004eae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e9c:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <xTaskGetSchedulerState+0x38>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d102      	bne.n	8004eaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	e001      	b.n	8004eae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004eae:	687b      	ldr	r3, [r7, #4]
	}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	20000cf8 	.word	0x20000cf8
 8004ec0:	20000d14 	.word	0x20000d14

08004ec4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d056      	beq.n	8004f88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004eda:	4b2e      	ldr	r3, [pc, #184]	; (8004f94 <xTaskPriorityDisinherit+0xd0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d00a      	beq.n	8004efa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	60fb      	str	r3, [r7, #12]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	60bb      	str	r3, [r7, #8]
}
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d02c      	beq.n	8004f88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d128      	bne.n	8004f88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe fc06 	bl	800374c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <xTaskPriorityDisinherit+0xd4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d903      	bls.n	8004f68 <xTaskPriorityDisinherit+0xa4>
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <xTaskPriorityDisinherit+0xd4>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <xTaskPriorityDisinherit+0xd8>)
 8004f76:	441a      	add	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f7fe fb87 	bl	8003692 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f84:	2301      	movs	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f88:	697b      	ldr	r3, [r7, #20]
	}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000818 	.word	0x20000818
 8004f98:	20000cf4 	.word	0x20000cf4
 8004f9c:	2000081c 	.word	0x2000081c

08004fa0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004faa:	4b21      	ldr	r3, [pc, #132]	; (8005030 <prvAddCurrentTaskToDelayedList+0x90>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fb0:	4b20      	ldr	r3, [pc, #128]	; (8005034 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe fbc8 	bl	800374c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc2:	d10a      	bne.n	8004fda <prvAddCurrentTaskToDelayedList+0x3a>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fca:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4819      	ldr	r0, [pc, #100]	; (8005038 <prvAddCurrentTaskToDelayedList+0x98>)
 8004fd4:	f7fe fb5d 	bl	8003692 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fd8:	e026      	b.n	8005028 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4413      	add	r3, r2
 8004fe0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fe2:	4b14      	ldr	r3, [pc, #80]	; (8005034 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d209      	bcs.n	8005006 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f7fe fb6b 	bl	80036da <vListInsert>
}
 8005004:	e010      	b.n	8005028 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005006:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <prvAddCurrentTaskToDelayedList+0x94>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f7fe fb61 	bl	80036da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <prvAddCurrentTaskToDelayedList+0xa4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	d202      	bcs.n	8005028 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005022:	4a08      	ldr	r2, [pc, #32]	; (8005044 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	6013      	str	r3, [r2, #0]
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20000cf0 	.word	0x20000cf0
 8005034:	20000818 	.word	0x20000818
 8005038:	20000cd8 	.word	0x20000cd8
 800503c:	20000ca8 	.word	0x20000ca8
 8005040:	20000ca4 	.word	0x20000ca4
 8005044:	20000d0c 	.word	0x20000d0c

08005048 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	; 0x28
 800504c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005052:	f000 fb07 	bl	8005664 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005056:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <xTimerCreateTimerTask+0x80>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d021      	beq.n	80050a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005066:	1d3a      	adds	r2, r7, #4
 8005068:	f107 0108 	add.w	r1, r7, #8
 800506c:	f107 030c 	add.w	r3, r7, #12
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe fac7 	bl	8003604 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	9202      	str	r2, [sp, #8]
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	2302      	movs	r3, #2
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	460a      	mov	r2, r1
 8005088:	4910      	ldr	r1, [pc, #64]	; (80050cc <xTimerCreateTimerTask+0x84>)
 800508a:	4811      	ldr	r0, [pc, #68]	; (80050d0 <xTimerCreateTimerTask+0x88>)
 800508c:	f7ff f874 	bl	8004178 <xTaskCreateStatic>
 8005090:	4603      	mov	r3, r0
 8005092:	4a10      	ldr	r2, [pc, #64]	; (80050d4 <xTimerCreateTimerTask+0x8c>)
 8005094:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005096:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <xTimerCreateTimerTask+0x8c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800509e:	2301      	movs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	613b      	str	r3, [r7, #16]
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050be:	697b      	ldr	r3, [r7, #20]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000d48 	.word	0x20000d48
 80050cc:	08006054 	.word	0x08006054
 80050d0:	0800520d 	.word	0x0800520d
 80050d4:	20000d4c 	.word	0x20000d4c

080050d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	; 0x28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <xTimerGenericCommand+0x2e>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	623b      	str	r3, [r7, #32]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <xTimerGenericCommand+0x98>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d02a      	beq.n	8005164 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b05      	cmp	r3, #5
 800511e:	dc18      	bgt.n	8005152 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005120:	f7ff feb2 	bl	8004e88 <xTaskGetSchedulerState>
 8005124:	4603      	mov	r3, r0
 8005126:	2b02      	cmp	r3, #2
 8005128:	d109      	bne.n	800513e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800512a:	4b11      	ldr	r3, [pc, #68]	; (8005170 <xTimerGenericCommand+0x98>)
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	f107 0110 	add.w	r1, r7, #16
 8005132:	2300      	movs	r3, #0
 8005134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005136:	f7fe fc37 	bl	80039a8 <xQueueGenericSend>
 800513a:	6278      	str	r0, [r7, #36]	; 0x24
 800513c:	e012      	b.n	8005164 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <xTimerGenericCommand+0x98>)
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	f107 0110 	add.w	r1, r7, #16
 8005146:	2300      	movs	r3, #0
 8005148:	2200      	movs	r2, #0
 800514a:	f7fe fc2d 	bl	80039a8 <xQueueGenericSend>
 800514e:	6278      	str	r0, [r7, #36]	; 0x24
 8005150:	e008      	b.n	8005164 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005152:	4b07      	ldr	r3, [pc, #28]	; (8005170 <xTimerGenericCommand+0x98>)
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	f107 0110 	add.w	r1, r7, #16
 800515a:	2300      	movs	r3, #0
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	f7fe fd21 	bl	8003ba4 <xQueueGenericSendFromISR>
 8005162:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005166:	4618      	mov	r0, r3
 8005168:	3728      	adds	r7, #40	; 0x28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000d48 	.word	0x20000d48

08005174 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af02      	add	r7, sp, #8
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517e:	4b22      	ldr	r3, [pc, #136]	; (8005208 <prvProcessExpiredTimer+0x94>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3304      	adds	r3, #4
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe fadd 	bl	800374c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d022      	beq.n	80051e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	18d1      	adds	r1, r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	6978      	ldr	r0, [r7, #20]
 80051ae:	f000 f8d1 	bl	8005354 <prvInsertTimerInActiveList>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01f      	beq.n	80051f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051b8:	2300      	movs	r3, #0
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	2300      	movs	r3, #0
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	2100      	movs	r1, #0
 80051c2:	6978      	ldr	r0, [r7, #20]
 80051c4:	f7ff ff88 	bl	80050d8 <xTimerGenericCommand>
 80051c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d113      	bne.n	80051f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	60fb      	str	r3, [r7, #12]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	6978      	ldr	r0, [r7, #20]
 80051fe:	4798      	blx	r3
}
 8005200:	bf00      	nop
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000d40 	.word	0x20000d40

0800520c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005214:	f107 0308 	add.w	r3, r7, #8
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f857 	bl	80052cc <prvGetNextExpireTime>
 800521e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4619      	mov	r1, r3
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f803 	bl	8005230 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800522a:	f000 f8d5 	bl	80053d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800522e:	e7f1      	b.n	8005214 <prvTimerTask+0x8>

08005230 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800523a:	f7ff fa43 	bl	80046c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f866 	bl	8005314 <prvSampleTimeNow>
 8005248:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d130      	bne.n	80052b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10a      	bne.n	800526c <prvProcessTimerOrBlockTask+0x3c>
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	429a      	cmp	r2, r3
 800525c:	d806      	bhi.n	800526c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800525e:	f7ff fa3f 	bl	80046e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff ff85 	bl	8005174 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800526a:	e024      	b.n	80052b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005272:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <prvProcessTimerOrBlockTask+0x90>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <prvProcessTimerOrBlockTask+0x50>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <prvProcessTimerOrBlockTask+0x52>
 8005280:	2300      	movs	r3, #0
 8005282:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005284:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <prvProcessTimerOrBlockTask+0x94>)
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	f7fe ff3d 	bl	8004110 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005296:	f7ff fa23 	bl	80046e0 <xTaskResumeAll>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052a0:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <prvProcessTimerOrBlockTask+0x98>)
 80052a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	f3bf 8f6f 	isb	sy
}
 80052b0:	e001      	b.n	80052b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052b2:	f7ff fa15 	bl	80046e0 <xTaskResumeAll>
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000d44 	.word	0x20000d44
 80052c4:	20000d48 	.word	0x20000d48
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052d4:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <prvGetNextExpireTime+0x44>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <prvGetNextExpireTime+0x16>
 80052de:	2201      	movs	r2, #1
 80052e0:	e000      	b.n	80052e4 <prvGetNextExpireTime+0x18>
 80052e2:	2200      	movs	r2, #0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d105      	bne.n	80052fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052f0:	4b07      	ldr	r3, [pc, #28]	; (8005310 <prvGetNextExpireTime+0x44>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e001      	b.n	8005300 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005300:	68fb      	ldr	r3, [r7, #12]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000d40 	.word	0x20000d40

08005314 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800531c:	f7ff fa7e 	bl	800481c <xTaskGetTickCount>
 8005320:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <prvSampleTimeNow+0x3c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	429a      	cmp	r2, r3
 800532a:	d205      	bcs.n	8005338 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800532c:	f000 f936 	bl	800559c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e002      	b.n	800533e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800533e:	4a04      	ldr	r2, [pc, #16]	; (8005350 <prvSampleTimeNow+0x3c>)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005344:	68fb      	ldr	r3, [r7, #12]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000d50 	.word	0x20000d50

08005354 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d812      	bhi.n	80053a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	429a      	cmp	r2, r3
 8005386:	d302      	bcc.n	800538e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005388:	2301      	movs	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e01b      	b.n	80053c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800538e:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <prvInsertTimerInActiveList+0x7c>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3304      	adds	r3, #4
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f7fe f99e 	bl	80036da <vListInsert>
 800539e:	e012      	b.n	80053c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d206      	bcs.n	80053b6 <prvInsertTimerInActiveList+0x62>
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d302      	bcc.n	80053b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053b0:	2301      	movs	r3, #1
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e007      	b.n	80053c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053b6:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <prvInsertTimerInActiveList+0x80>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3304      	adds	r3, #4
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f7fe f98a 	bl	80036da <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053c6:	697b      	ldr	r3, [r7, #20]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000d44 	.word	0x20000d44
 80053d4:	20000d40 	.word	0x20000d40

080053d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08e      	sub	sp, #56	; 0x38
 80053dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053de:	e0ca      	b.n	8005576 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	da18      	bge.n	8005418 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053e6:	1d3b      	adds	r3, r7, #4
 80053e8:	3304      	adds	r3, #4
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	61fb      	str	r3, [r7, #28]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540e:	6850      	ldr	r0, [r2, #4]
 8005410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005412:	6892      	ldr	r2, [r2, #8]
 8005414:	4611      	mov	r1, r2
 8005416:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f2c0 80aa 	blt.w	8005574 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	3304      	adds	r3, #4
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe f98b 	bl	800374c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005436:	463b      	mov	r3, r7
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff ff6b 	bl	8005314 <prvSampleTimeNow>
 800543e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b09      	cmp	r3, #9
 8005444:	f200 8097 	bhi.w	8005576 <prvProcessReceivedCommands+0x19e>
 8005448:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <prvProcessReceivedCommands+0x78>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005479 	.word	0x08005479
 8005454:	08005479 	.word	0x08005479
 8005458:	08005479 	.word	0x08005479
 800545c:	080054ed 	.word	0x080054ed
 8005460:	08005501 	.word	0x08005501
 8005464:	0800554b 	.word	0x0800554b
 8005468:	08005479 	.word	0x08005479
 800546c:	08005479 	.word	0x08005479
 8005470:	080054ed 	.word	0x080054ed
 8005474:	08005501 	.word	0x08005501
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	18d1      	adds	r1, r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005498:	f7ff ff5c 	bl	8005354 <prvInsertTimerInActiveList>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d069      	beq.n	8005576 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d05e      	beq.n	8005576 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	441a      	add	r2, r3
 80054c0:	2300      	movs	r3, #0
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	2100      	movs	r1, #0
 80054c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ca:	f7ff fe05 	bl	80050d8 <xTimerGenericCommand>
 80054ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d14f      	bne.n	8005576 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	61bb      	str	r3, [r7, #24]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80054fe:	e03a      	b.n	8005576 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	617b      	str	r3, [r7, #20]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	18d1      	adds	r1, r2, r3
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005544:	f7ff ff06 	bl	8005354 <prvInsertTimerInActiveList>
					break;
 8005548:	e015      	b.n	8005576 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555a:	f000 fbe1 	bl	8005d20 <vPortFree>
 800555e:	e00a      	b.n	8005576 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	b2da      	uxtb	r2, r3
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005572:	e000      	b.n	8005576 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005574:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005576:	4b08      	ldr	r3, [pc, #32]	; (8005598 <prvProcessReceivedCommands+0x1c0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	1d39      	adds	r1, r7, #4
 800557c:	2200      	movs	r2, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe fbac 	bl	8003cdc <xQueueReceive>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	f47f af2a 	bne.w	80053e0 <prvProcessReceivedCommands+0x8>
	}
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	3730      	adds	r7, #48	; 0x30
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000d48 	.word	0x20000d48

0800559c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055a2:	e048      	b.n	8005636 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055a4:	4b2d      	ldr	r3, [pc, #180]	; (800565c <prvSwitchTimerLists+0xc0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ae:	4b2b      	ldr	r3, [pc, #172]	; (800565c <prvSwitchTimerLists+0xc0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe f8c5 	bl	800374c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d02e      	beq.n	8005636 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4413      	add	r3, r2
 80055e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d90e      	bls.n	8005608 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055f6:	4b19      	ldr	r3, [pc, #100]	; (800565c <prvSwitchTimerLists+0xc0>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3304      	adds	r3, #4
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f7fe f86a 	bl	80036da <vListInsert>
 8005606:	e016      	b.n	8005636 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005608:	2300      	movs	r3, #0
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	2300      	movs	r3, #0
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	2100      	movs	r1, #0
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7ff fd60 	bl	80050d8 <xTimerGenericCommand>
 8005618:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	603b      	str	r3, [r7, #0]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <prvSwitchTimerLists+0xc0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1b1      	bne.n	80055a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <prvSwitchTimerLists+0xc0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <prvSwitchTimerLists+0xc4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a04      	ldr	r2, [pc, #16]	; (800565c <prvSwitchTimerLists+0xc0>)
 800564c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800564e:	4a04      	ldr	r2, [pc, #16]	; (8005660 <prvSwitchTimerLists+0xc4>)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	6013      	str	r3, [r2, #0]
}
 8005654:	bf00      	nop
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000d40 	.word	0x20000d40
 8005660:	20000d44 	.word	0x20000d44

08005664 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800566a:	f000 f96b 	bl	8005944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <prvCheckForValidListAndQueue+0x60>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d120      	bne.n	80056b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005676:	4814      	ldr	r0, [pc, #80]	; (80056c8 <prvCheckForValidListAndQueue+0x64>)
 8005678:	f7fd ffde 	bl	8003638 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800567c:	4813      	ldr	r0, [pc, #76]	; (80056cc <prvCheckForValidListAndQueue+0x68>)
 800567e:	f7fd ffdb 	bl	8003638 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005682:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <prvCheckForValidListAndQueue+0x6c>)
 8005684:	4a10      	ldr	r2, [pc, #64]	; (80056c8 <prvCheckForValidListAndQueue+0x64>)
 8005686:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005688:	4b12      	ldr	r3, [pc, #72]	; (80056d4 <prvCheckForValidListAndQueue+0x70>)
 800568a:	4a10      	ldr	r2, [pc, #64]	; (80056cc <prvCheckForValidListAndQueue+0x68>)
 800568c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800568e:	2300      	movs	r3, #0
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <prvCheckForValidListAndQueue+0x74>)
 8005694:	4a11      	ldr	r2, [pc, #68]	; (80056dc <prvCheckForValidListAndQueue+0x78>)
 8005696:	2110      	movs	r1, #16
 8005698:	200a      	movs	r0, #10
 800569a:	f7fe f8e9 	bl	8003870 <xQueueGenericCreateStatic>
 800569e:	4603      	mov	r3, r0
 80056a0:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <prvCheckForValidListAndQueue+0x60>)
 80056a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056a4:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <prvCheckForValidListAndQueue+0x60>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <prvCheckForValidListAndQueue+0x60>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	490b      	ldr	r1, [pc, #44]	; (80056e0 <prvCheckForValidListAndQueue+0x7c>)
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe fd02 	bl	80040bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b8:	f000 f974 	bl	80059a4 <vPortExitCritical>
}
 80056bc:	bf00      	nop
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000d48 	.word	0x20000d48
 80056c8:	20000d18 	.word	0x20000d18
 80056cc:	20000d2c 	.word	0x20000d2c
 80056d0:	20000d40 	.word	0x20000d40
 80056d4:	20000d44 	.word	0x20000d44
 80056d8:	20000df4 	.word	0x20000df4
 80056dc:	20000d54 	.word	0x20000d54
 80056e0:	0800605c 	.word	0x0800605c

080056e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3b04      	subs	r3, #4
 80056f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3b04      	subs	r3, #4
 8005702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f023 0201 	bic.w	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3b04      	subs	r3, #4
 8005712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005714:	4a0c      	ldr	r2, [pc, #48]	; (8005748 <pxPortInitialiseStack+0x64>)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3b14      	subs	r3, #20
 800571e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3b04      	subs	r3, #4
 800572a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f06f 0202 	mvn.w	r2, #2
 8005732:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3b20      	subs	r3, #32
 8005738:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800573a:	68fb      	ldr	r3, [r7, #12]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	0800574d 	.word	0x0800574d

0800574c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005756:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <prvTaskExitError+0x54>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800575e:	d00a      	beq.n	8005776 <prvTaskExitError+0x2a>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	60fb      	str	r3, [r7, #12]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <prvTaskExitError+0x28>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	60bb      	str	r3, [r7, #8]
}
 8005788:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800578a:	bf00      	nop
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0fc      	beq.n	800578c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	2000000c 	.word	0x2000000c
	...

080057b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057b0:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <pxCurrentTCBConst2>)
 80057b2:	6819      	ldr	r1, [r3, #0]
 80057b4:	6808      	ldr	r0, [r1, #0]
 80057b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ba:	f380 8809 	msr	PSP, r0
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f04f 0000 	mov.w	r0, #0
 80057c6:	f380 8811 	msr	BASEPRI, r0
 80057ca:	4770      	bx	lr
 80057cc:	f3af 8000 	nop.w

080057d0 <pxCurrentTCBConst2>:
 80057d0:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop

080057d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057d8:	4808      	ldr	r0, [pc, #32]	; (80057fc <prvPortStartFirstTask+0x24>)
 80057da:	6800      	ldr	r0, [r0, #0]
 80057dc:	6800      	ldr	r0, [r0, #0]
 80057de:	f380 8808 	msr	MSP, r0
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f380 8814 	msr	CONTROL, r0
 80057ea:	b662      	cpsie	i
 80057ec:	b661      	cpsie	f
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	df00      	svc	0
 80057f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057fa:	bf00      	nop
 80057fc:	e000ed08 	.word	0xe000ed08

08005800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005806:	4b46      	ldr	r3, [pc, #280]	; (8005920 <xPortStartScheduler+0x120>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a46      	ldr	r2, [pc, #280]	; (8005924 <xPortStartScheduler+0x124>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d10a      	bne.n	8005826 <xPortStartScheduler+0x26>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	613b      	str	r3, [r7, #16]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005826:	4b3e      	ldr	r3, [pc, #248]	; (8005920 <xPortStartScheduler+0x120>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a3f      	ldr	r2, [pc, #252]	; (8005928 <xPortStartScheduler+0x128>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10a      	bne.n	8005846 <xPortStartScheduler+0x46>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	60fb      	str	r3, [r7, #12]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005846:	4b39      	ldr	r3, [pc, #228]	; (800592c <xPortStartScheduler+0x12c>)
 8005848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	22ff      	movs	r2, #255	; 0xff
 8005856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005868:	b2da      	uxtb	r2, r3
 800586a:	4b31      	ldr	r3, [pc, #196]	; (8005930 <xPortStartScheduler+0x130>)
 800586c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800586e:	4b31      	ldr	r3, [pc, #196]	; (8005934 <xPortStartScheduler+0x134>)
 8005870:	2207      	movs	r2, #7
 8005872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005874:	e009      	b.n	800588a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005876:	4b2f      	ldr	r3, [pc, #188]	; (8005934 <xPortStartScheduler+0x134>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3b01      	subs	r3, #1
 800587c:	4a2d      	ldr	r2, [pc, #180]	; (8005934 <xPortStartScheduler+0x134>)
 800587e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	b2db      	uxtb	r3, r3
 8005888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800588a:	78fb      	ldrb	r3, [r7, #3]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d0ef      	beq.n	8005876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005896:	4b27      	ldr	r3, [pc, #156]	; (8005934 <xPortStartScheduler+0x134>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1c3 0307 	rsb	r3, r3, #7
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d00a      	beq.n	80058b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	60bb      	str	r3, [r7, #8]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058b8:	4b1e      	ldr	r3, [pc, #120]	; (8005934 <xPortStartScheduler+0x134>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <xPortStartScheduler+0x134>)
 80058c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058c2:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <xPortStartScheduler+0x134>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <xPortStartScheduler+0x134>)
 80058cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058d6:	4b18      	ldr	r3, [pc, #96]	; (8005938 <xPortStartScheduler+0x138>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a17      	ldr	r2, [pc, #92]	; (8005938 <xPortStartScheduler+0x138>)
 80058dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058e2:	4b15      	ldr	r3, [pc, #84]	; (8005938 <xPortStartScheduler+0x138>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a14      	ldr	r2, [pc, #80]	; (8005938 <xPortStartScheduler+0x138>)
 80058e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058ee:	f000 f8dd 	bl	8005aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <xPortStartScheduler+0x13c>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058f8:	f000 f8fc 	bl	8005af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058fc:	4b10      	ldr	r3, [pc, #64]	; (8005940 <xPortStartScheduler+0x140>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a0f      	ldr	r2, [pc, #60]	; (8005940 <xPortStartScheduler+0x140>)
 8005902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005908:	f7ff ff66 	bl	80057d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800590c:	f7ff f850 	bl	80049b0 <vTaskSwitchContext>
	prvTaskExitError();
 8005910:	f7ff ff1c 	bl	800574c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	e000ed00 	.word	0xe000ed00
 8005924:	410fc271 	.word	0x410fc271
 8005928:	410fc270 	.word	0x410fc270
 800592c:	e000e400 	.word	0xe000e400
 8005930:	20000e44 	.word	0x20000e44
 8005934:	20000e48 	.word	0x20000e48
 8005938:	e000ed20 	.word	0xe000ed20
 800593c:	2000000c 	.word	0x2000000c
 8005940:	e000ef34 	.word	0xe000ef34

08005944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	607b      	str	r3, [r7, #4]
}
 800595c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <vPortEnterCritical+0x58>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3301      	adds	r3, #1
 8005964:	4a0d      	ldr	r2, [pc, #52]	; (800599c <vPortEnterCritical+0x58>)
 8005966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <vPortEnterCritical+0x58>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d10f      	bne.n	8005990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <vPortEnterCritical+0x5c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <vPortEnterCritical+0x4c>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	603b      	str	r3, [r7, #0]
}
 800598c:	bf00      	nop
 800598e:	e7fe      	b.n	800598e <vPortEnterCritical+0x4a>
	}
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	2000000c 	.word	0x2000000c
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059aa:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <vPortExitCritical+0x50>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <vPortExitCritical+0x24>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	607b      	str	r3, [r7, #4]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <vPortExitCritical+0x50>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	4a09      	ldr	r2, [pc, #36]	; (80059f4 <vPortExitCritical+0x50>)
 80059d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059d2:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <vPortExitCritical+0x50>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d105      	bne.n	80059e6 <vPortExitCritical+0x42>
 80059da:	2300      	movs	r3, #0
 80059dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	f383 8811 	msr	BASEPRI, r3
}
 80059e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	2000000c 	.word	0x2000000c
	...

08005a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a00:	f3ef 8009 	mrs	r0, PSP
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <pxCurrentTCBConst>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	f01e 0f10 	tst.w	lr, #16
 8005a10:	bf08      	it	eq
 8005a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1a:	6010      	str	r0, [r2, #0]
 8005a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a24:	f380 8811 	msr	BASEPRI, r0
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f7fe ffbe 	bl	80049b0 <vTaskSwitchContext>
 8005a34:	f04f 0000 	mov.w	r0, #0
 8005a38:	f380 8811 	msr	BASEPRI, r0
 8005a3c:	bc09      	pop	{r0, r3}
 8005a3e:	6819      	ldr	r1, [r3, #0]
 8005a40:	6808      	ldr	r0, [r1, #0]
 8005a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a46:	f01e 0f10 	tst.w	lr, #16
 8005a4a:	bf08      	it	eq
 8005a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a50:	f380 8809 	msr	PSP, r0
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	f3af 8000 	nop.w

08005a60 <pxCurrentTCBConst>:
 8005a60:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop

08005a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	607b      	str	r3, [r7, #4]
}
 8005a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a82:	f7fe fedb 	bl	800483c <xTaskIncrementTick>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a8c:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <xPortSysTickHandler+0x40>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	2300      	movs	r3, #0
 8005a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f383 8811 	msr	BASEPRI, r3
}
 8005a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <vPortSetupTimerInterrupt+0x34>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <vPortSetupTimerInterrupt+0x38>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005abc:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <vPortSetupTimerInterrupt+0x3c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <vPortSetupTimerInterrupt+0x40>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	099b      	lsrs	r3, r3, #6
 8005ac8:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <vPortSetupTimerInterrupt+0x44>)
 8005aca:	3b01      	subs	r3, #1
 8005acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ace:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <vPortSetupTimerInterrupt+0x34>)
 8005ad0:	2207      	movs	r2, #7
 8005ad2:	601a      	str	r2, [r3, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	e000e010 	.word	0xe000e010
 8005ae4:	e000e018 	.word	0xe000e018
 8005ae8:	20000004 	.word	0x20000004
 8005aec:	10624dd3 	.word	0x10624dd3
 8005af0:	e000e014 	.word	0xe000e014

08005af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b04 <vPortEnableVFP+0x10>
 8005af8:	6801      	ldr	r1, [r0, #0]
 8005afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005afe:	6001      	str	r1, [r0, #0]
 8005b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b02:	bf00      	nop
 8005b04:	e000ed88 	.word	0xe000ed88

08005b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b0e:	f3ef 8305 	mrs	r3, IPSR
 8005b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b0f      	cmp	r3, #15
 8005b18:	d914      	bls.n	8005b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b1a:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <vPortValidateInterruptPriority+0x70>)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b24:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <vPortValidateInterruptPriority+0x74>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	7afa      	ldrb	r2, [r7, #11]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d20a      	bcs.n	8005b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b44:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <vPortValidateInterruptPriority+0x78>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b4c:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <vPortValidateInterruptPriority+0x7c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d90a      	bls.n	8005b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	603b      	str	r3, [r7, #0]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <vPortValidateInterruptPriority+0x60>
	}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	e000e3f0 	.word	0xe000e3f0
 8005b7c:	20000e44 	.word	0x20000e44
 8005b80:	e000ed0c 	.word	0xe000ed0c
 8005b84:	20000e48 	.word	0x20000e48

08005b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b94:	f7fe fd96 	bl	80046c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b98:	4b5b      	ldr	r3, [pc, #364]	; (8005d08 <pvPortMalloc+0x180>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ba0:	f000 f920 	bl	8005de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ba4:	4b59      	ldr	r3, [pc, #356]	; (8005d0c <pvPortMalloc+0x184>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f040 8093 	bne.w	8005cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01d      	beq.n	8005bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005bb8:	2208      	movs	r2, #8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d014      	beq.n	8005bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f023 0307 	bic.w	r3, r3, #7
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	617b      	str	r3, [r7, #20]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d06e      	beq.n	8005cd8 <pvPortMalloc+0x150>
 8005bfa:	4b45      	ldr	r3, [pc, #276]	; (8005d10 <pvPortMalloc+0x188>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d869      	bhi.n	8005cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c04:	4b43      	ldr	r3, [pc, #268]	; (8005d14 <pvPortMalloc+0x18c>)
 8005c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c08:	4b42      	ldr	r3, [pc, #264]	; (8005d14 <pvPortMalloc+0x18c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c0e:	e004      	b.n	8005c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d903      	bls.n	8005c2c <pvPortMalloc+0xa4>
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f1      	bne.n	8005c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c2c:	4b36      	ldr	r3, [pc, #216]	; (8005d08 <pvPortMalloc+0x180>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d050      	beq.n	8005cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	4413      	add	r3, r2
 8005c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	2308      	movs	r3, #8
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d91f      	bls.n	8005c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <pvPortMalloc+0xf8>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	613b      	str	r3, [r7, #16]
}
 8005c7c:	bf00      	nop
 8005c7e:	e7fe      	b.n	8005c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c92:	69b8      	ldr	r0, [r7, #24]
 8005c94:	f000 f908 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c98:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <pvPortMalloc+0x188>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <pvPortMalloc+0x188>)
 8005ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ca6:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <pvPortMalloc+0x188>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <pvPortMalloc+0x190>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d203      	bcs.n	8005cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cb2:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <pvPortMalloc+0x188>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <pvPortMalloc+0x190>)
 8005cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <pvPortMalloc+0x184>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <pvPortMalloc+0x194>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <pvPortMalloc+0x194>)
 8005cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cd8:	f7fe fd02 	bl	80046e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <pvPortMalloc+0x174>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60fb      	str	r3, [r7, #12]
}
 8005cf8:	bf00      	nop
 8005cfa:	e7fe      	b.n	8005cfa <pvPortMalloc+0x172>
	return pvReturn;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3728      	adds	r7, #40	; 0x28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20001a0c 	.word	0x20001a0c
 8005d0c:	20001a20 	.word	0x20001a20
 8005d10:	20001a10 	.word	0x20001a10
 8005d14:	20001a04 	.word	0x20001a04
 8005d18:	20001a14 	.word	0x20001a14
 8005d1c:	20001a18 	.word	0x20001a18

08005d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d04d      	beq.n	8005dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d32:	2308      	movs	r3, #8
 8005d34:	425b      	negs	r3, r3
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4413      	add	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <vPortFree+0xb8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <vPortFree+0x44>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60fb      	str	r3, [r7, #12]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <vPortFree+0x62>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60bb      	str	r3, [r7, #8]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <vPortFree+0xb8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01e      	beq.n	8005dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11a      	bne.n	8005dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <vPortFree+0xb8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	401a      	ands	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005da8:	f7fe fc8c 	bl	80046c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <vPortFree+0xbc>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4413      	add	r3, r2
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <vPortFree+0xbc>)
 8005db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dba:	6938      	ldr	r0, [r7, #16]
 8005dbc:	f000 f874 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <vPortFree+0xc0>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	4a06      	ldr	r2, [pc, #24]	; (8005de0 <vPortFree+0xc0>)
 8005dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dca:	f7fe fc89 	bl	80046e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20001a20 	.word	0x20001a20
 8005ddc:	20001a10 	.word	0x20001a10
 8005de0:	20001a1c 	.word	0x20001a1c

08005de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005df0:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <prvHeapInit+0xac>)
 8005df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00c      	beq.n	8005e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3307      	adds	r3, #7
 8005e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0307 	bic.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <prvHeapInit+0xac>)
 8005e14:	4413      	add	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <prvHeapInit+0xb0>)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e22:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <prvHeapInit+0xb0>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e30:	2208      	movs	r2, #8
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <prvHeapInit+0xb4>)
 8005e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e46:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <prvHeapInit+0xb4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e4e:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <prvHeapInit+0xb4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <prvHeapInit+0xb4>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <prvHeapInit+0xb8>)
 8005e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <prvHeapInit+0xbc>)
 8005e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e7c:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <prvHeapInit+0xc0>)
 8005e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e82:	601a      	str	r2, [r3, #0]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	20000e4c 	.word	0x20000e4c
 8005e94:	20001a04 	.word	0x20001a04
 8005e98:	20001a0c 	.word	0x20001a0c
 8005e9c:	20001a14 	.word	0x20001a14
 8005ea0:	20001a10 	.word	0x20001a10
 8005ea4:	20001a20 	.word	0x20001a20

08005ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005eb0:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <prvInsertBlockIntoFreeList+0xac>)
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e002      	b.n	8005ebc <prvInsertBlockIntoFreeList+0x14>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d8f7      	bhi.n	8005eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d108      	bne.n	8005eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d118      	bne.n	8005f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <prvInsertBlockIntoFreeList+0xb0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d00d      	beq.n	8005f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	441a      	add	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e008      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <prvInsertBlockIntoFreeList+0xb0>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e003      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d002      	beq.n	8005f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20001a04 	.word	0x20001a04
 8005f58:	20001a0c 	.word	0x20001a0c

08005f5c <__libc_init_array>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	4d0d      	ldr	r5, [pc, #52]	; (8005f94 <__libc_init_array+0x38>)
 8005f60:	4c0d      	ldr	r4, [pc, #52]	; (8005f98 <__libc_init_array+0x3c>)
 8005f62:	1b64      	subs	r4, r4, r5
 8005f64:	10a4      	asrs	r4, r4, #2
 8005f66:	2600      	movs	r6, #0
 8005f68:	42a6      	cmp	r6, r4
 8005f6a:	d109      	bne.n	8005f80 <__libc_init_array+0x24>
 8005f6c:	4d0b      	ldr	r5, [pc, #44]	; (8005f9c <__libc_init_array+0x40>)
 8005f6e:	4c0c      	ldr	r4, [pc, #48]	; (8005fa0 <__libc_init_array+0x44>)
 8005f70:	f000 f82e 	bl	8005fd0 <_init>
 8005f74:	1b64      	subs	r4, r4, r5
 8005f76:	10a4      	asrs	r4, r4, #2
 8005f78:	2600      	movs	r6, #0
 8005f7a:	42a6      	cmp	r6, r4
 8005f7c:	d105      	bne.n	8005f8a <__libc_init_array+0x2e>
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
 8005f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f84:	4798      	blx	r3
 8005f86:	3601      	adds	r6, #1
 8005f88:	e7ee      	b.n	8005f68 <__libc_init_array+0xc>
 8005f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f8e:	4798      	blx	r3
 8005f90:	3601      	adds	r6, #1
 8005f92:	e7f2      	b.n	8005f7a <__libc_init_array+0x1e>
 8005f94:	080060b4 	.word	0x080060b4
 8005f98:	080060b4 	.word	0x080060b4
 8005f9c:	080060b4 	.word	0x080060b4
 8005fa0:	080060b8 	.word	0x080060b8

08005fa4 <memcpy>:
 8005fa4:	440a      	add	r2, r1
 8005fa6:	4291      	cmp	r1, r2
 8005fa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fac:	d100      	bne.n	8005fb0 <memcpy+0xc>
 8005fae:	4770      	bx	lr
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fba:	4291      	cmp	r1, r2
 8005fbc:	d1f9      	bne.n	8005fb2 <memcpy+0xe>
 8005fbe:	bd10      	pop	{r4, pc}

08005fc0 <memset>:
 8005fc0:	4402      	add	r2, r0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d100      	bne.n	8005fca <memset+0xa>
 8005fc8:	4770      	bx	lr
 8005fca:	f803 1b01 	strb.w	r1, [r3], #1
 8005fce:	e7f9      	b.n	8005fc4 <memset+0x4>

08005fd0 <_init>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	bf00      	nop
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr

08005fdc <_fini>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr
